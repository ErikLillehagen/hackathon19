
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002228  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002368  08002368  00012368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080023f4  080023f4  000123f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080023f8  080023f8  000123f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080023fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000df4  20000008  08002404  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000dfc  08002404  00020dfc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018ab4  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000031fc  00000000  00000000  00038ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000088b1  00000000  00000000  0003bce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b60  00000000  00000000  00044598  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011f0  00000000  00000000  000450f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000067e5  00000000  00000000  000462e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004946  00000000  00000000  0004cacd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00051413  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000202c  00000000  00000000  00051490  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000008 	.word	0x20000008
 800015c:	00000000 	.word	0x00000000
 8000160:	08002350 	.word	0x08002350

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000000c 	.word	0x2000000c
 800017c:	08002350 	.word	0x08002350

08000180 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000180:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000182:	2003      	movs	r0, #3
 8000184:	f000 f816 	bl	80001b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000188:	2000      	movs	r0, #0
 800018a:	f002 f825 	bl	80021d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800018e:	f001 ffc7 	bl	8002120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000192:	2000      	movs	r0, #0
 8000194:	bd08      	pop	{r3, pc}
	...

08000198 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000198:	4a02      	ldr	r2, [pc, #8]	; (80001a4 <HAL_IncTick+0xc>)
 800019a:	6813      	ldr	r3, [r2, #0]
 800019c:	3301      	adds	r3, #1
 800019e:	6013      	str	r3, [r2, #0]
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000d70 	.word	0x20000d70

080001a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a8:	4b01      	ldr	r3, [pc, #4]	; (80001b0 <HAL_GetTick+0x8>)
 80001aa:	6818      	ldr	r0, [r3, #0]
}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000d70 	.word	0x20000d70

080001b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001b4:	4a07      	ldr	r2, [pc, #28]	; (80001d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001b6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001b8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001c2:	041b      	lsls	r3, r3, #16
 80001c4:	0c1b      	lsrs	r3, r3, #16
 80001c6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001ce:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001d0:	60d3      	str	r3, [r2, #12]
 80001d2:	4770      	bx	lr
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001d8:	4b17      	ldr	r3, [pc, #92]	; (8000238 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80001da:	b530      	push	{r4, r5, lr}
 80001dc:	68dc      	ldr	r4, [r3, #12]
 80001de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001e8:	2b04      	cmp	r3, #4
 80001ea:	bf28      	it	cs
 80001ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001ee:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001f0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001f4:	bf98      	it	ls
 80001f6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001f8:	fa05 f303 	lsl.w	r3, r5, r3
 80001fc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000200:	bf88      	it	hi
 8000202:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000204:	4019      	ands	r1, r3
 8000206:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000208:	fa05 f404 	lsl.w	r4, r5, r4
 800020c:	3c01      	subs	r4, #1
 800020e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000210:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000212:	ea42 0201 	orr.w	r2, r2, r1
 8000216:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021a:	bfaf      	iteee	ge
 800021c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000220:	4b06      	ldrlt	r3, [pc, #24]	; (800023c <HAL_NVIC_SetPriority+0x64>)
 8000222:	f000 000f 	andlt.w	r0, r0, #15
 8000226:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000228:	bfa5      	ittet	ge
 800022a:	b2d2      	uxtbge	r2, r2
 800022c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000230:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000232:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000236:	bd30      	pop	{r4, r5, pc}
 8000238:	e000ed00 	.word	0xe000ed00
 800023c:	e000ed14 	.word	0xe000ed14

08000240 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000240:	2301      	movs	r3, #1
 8000242:	0942      	lsrs	r2, r0, #5
 8000244:	f000 001f 	and.w	r0, r0, #31
 8000248:	fa03 f000 	lsl.w	r0, r3, r0
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_NVIC_EnableIRQ+0x14>)
 800024e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000252:	4770      	bx	lr
 8000254:	e000e100 	.word	0xe000e100

08000258 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 8000258:	2300      	movs	r3, #0
{ 
 800025a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800025e:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000262:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80003f8 <HAL_GPIO_Init+0x1a0>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000266:	4a62      	ldr	r2, [pc, #392]	; (80003f0 <HAL_GPIO_Init+0x198>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000268:	fa38 f403 	lsrs.w	r4, r8, r3
 800026c:	d102      	bne.n	8000274 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 800026e:	b003      	add	sp, #12
 8000270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000274:	f04f 0e01 	mov.w	lr, #1
 8000278:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 800027c:	ea18 060e 	ands.w	r6, r8, lr
 8000280:	f000 80a8 	beq.w	80003d4 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000284:	684c      	ldr	r4, [r1, #4]
 8000286:	f024 0710 	bic.w	r7, r4, #16
 800028a:	2f02      	cmp	r7, #2
 800028c:	d116      	bne.n	80002bc <HAL_GPIO_Init+0x64>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800028e:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3];
 8000292:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000296:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800029a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800029e:	f8da 5020 	ldr.w	r5, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80002a2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80002a6:	fa0c fc0b 	lsl.w	ip, ip, fp
 80002aa:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80002ae:	690d      	ldr	r5, [r1, #16]
 80002b0:	fa05 f50b 	lsl.w	r5, r5, fp
 80002b4:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80002b8:	f8ca 5020 	str.w	r5, [sl, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80002bc:	2503      	movs	r5, #3
 80002be:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 80002c2:	fa05 f50a 	lsl.w	r5, r5, sl
 80002c6:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 80002c8:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80002cc:	f004 0c03 	and.w	ip, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80002d0:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80002d4:	fa0c fc0a 	lsl.w	ip, ip, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80002d8:	3f01      	subs	r7, #1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80002da:	ea4c 0c0b 	orr.w	ip, ip, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80002de:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80002e0:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80002e4:	d811      	bhi.n	800030a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR; 
 80002e6:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80002e8:	ea07 0b05 	and.w	fp, r7, r5
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80002ec:	68cf      	ldr	r7, [r1, #12]
 80002ee:	fa07 fc0a 	lsl.w	ip, r7, sl
 80002f2:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80002f6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80002f8:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80002fa:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80002fe:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000302:	409f      	lsls	r7, r3
 8000304:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000308:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800030a:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800030c:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800030e:	688f      	ldr	r7, [r1, #8]
 8000310:	fa07 f70a 	lsl.w	r7, r7, sl
 8000314:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000316:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000318:	00e5      	lsls	r5, r4, #3
 800031a:	d55b      	bpl.n	80003d4 <HAL_GPIO_Init+0x17c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800031c:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000320:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000324:	f023 0703 	bic.w	r7, r3, #3
 8000328:	f045 0501 	orr.w	r5, r5, #1
 800032c:	f8c9 5020 	str.w	r5, [r9, #32]
 8000330:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000334:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000338:	f005 0501 	and.w	r5, r5, #1
 800033c:	9501      	str	r5, [sp, #4]
 800033e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000342:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000346:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000348:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 800034c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000350:	fa0c f50e 	lsl.w	r5, ip, lr
 8000354:	ea2a 0c05 	bic.w	ip, sl, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000358:	4d26      	ldr	r5, [pc, #152]	; (80003f4 <HAL_GPIO_Init+0x19c>)
 800035a:	42a8      	cmp	r0, r5
 800035c:	d03c      	beq.n	80003d8 <HAL_GPIO_Init+0x180>
 800035e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000362:	42a8      	cmp	r0, r5
 8000364:	d03a      	beq.n	80003dc <HAL_GPIO_Init+0x184>
 8000366:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800036a:	42a8      	cmp	r0, r5
 800036c:	d038      	beq.n	80003e0 <HAL_GPIO_Init+0x188>
 800036e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000372:	42a8      	cmp	r0, r5
 8000374:	d036      	beq.n	80003e4 <HAL_GPIO_Init+0x18c>
 8000376:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037a:	42a8      	cmp	r0, r5
 800037c:	d034      	beq.n	80003e8 <HAL_GPIO_Init+0x190>
 800037e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000382:	42a8      	cmp	r0, r5
 8000384:	d032      	beq.n	80003ec <HAL_GPIO_Init+0x194>
 8000386:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038a:	42a8      	cmp	r0, r5
 800038c:	bf14      	ite	ne
 800038e:	2507      	movne	r5, #7
 8000390:	2506      	moveq	r5, #6
 8000392:	fa05 f50e 	lsl.w	r5, r5, lr
 8000396:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800039a:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800039c:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 800039e:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003a0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80003a4:	bf0c      	ite	eq
 80003a6:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80003a8:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80003aa:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80003ac:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ae:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80003b2:	bf0c      	ite	eq
 80003b4:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80003b6:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 80003b8:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80003ba:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003bc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80003c0:	bf0c      	ite	eq
 80003c2:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80003c4:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80003c6:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80003c8:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003ca:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80003cc:	bf54      	ite	pl
 80003ce:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 80003d0:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80003d2:	60d5      	str	r5, [r2, #12]
    position++;
 80003d4:	3301      	adds	r3, #1
 80003d6:	e747      	b.n	8000268 <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003d8:	2500      	movs	r5, #0
 80003da:	e7da      	b.n	8000392 <HAL_GPIO_Init+0x13a>
 80003dc:	2501      	movs	r5, #1
 80003de:	e7d8      	b.n	8000392 <HAL_GPIO_Init+0x13a>
 80003e0:	2502      	movs	r5, #2
 80003e2:	e7d6      	b.n	8000392 <HAL_GPIO_Init+0x13a>
 80003e4:	2503      	movs	r5, #3
 80003e6:	e7d4      	b.n	8000392 <HAL_GPIO_Init+0x13a>
 80003e8:	2504      	movs	r5, #4
 80003ea:	e7d2      	b.n	8000392 <HAL_GPIO_Init+0x13a>
 80003ec:	2505      	movs	r5, #5
 80003ee:	e7d0      	b.n	8000392 <HAL_GPIO_Init+0x13a>
 80003f0:	40010400 	.word	0x40010400
 80003f4:	40020000 	.word	0x40020000
 80003f8:	40023800 	.word	0x40023800

080003fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80003fc:	6903      	ldr	r3, [r0, #16]
 80003fe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000400:	bf14      	ite	ne
 8000402:	2001      	movne	r0, #1
 8000404:	2000      	moveq	r0, #0
 8000406:	4770      	bx	lr

08000408 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000408:	b10a      	cbz	r2, 800040e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800040a:	6181      	str	r1, [r0, #24]
 800040c:	4770      	bx	lr
 800040e:	0409      	lsls	r1, r1, #16
 8000410:	e7fb      	b.n	800040a <HAL_GPIO_WritePin+0x2>
	...

08000414 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000414:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8000416:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000418:	689a      	ldr	r2, [r3, #8]
 800041a:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800041e:	d00c      	beq.n	800043a <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8000420:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8000422:	491a      	ldr	r1, [pc, #104]	; (800048c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000424:	680b      	ldr	r3, [r1, #0]
 8000426:	f023 0301 	bic.w	r3, r3, #1
 800042a:	4313      	orrs	r3, r2
 800042c:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800042e:	6808      	ldr	r0, [r1, #0]
 8000430:	f000 0001 	and.w	r0, r0, #1
 8000434:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000436:	b002      	add	sp, #8
 8000438:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800043a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800043c:	4914      	ldr	r1, [pc, #80]	; (8000490 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800043e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000442:	d00f      	beq.n	8000464 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000444:	680a      	ldr	r2, [r1, #0]
 8000446:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800044a:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800044e:	d1e7      	bne.n	8000420 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000450:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8000454:	d1e4      	bne.n	8000420 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8000456:	4a0d      	ldr	r2, [pc, #52]	; (800048c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000458:	6813      	ldr	r3, [r2, #0]
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8000460:	2201      	movs	r2, #1
 8000462:	e7de      	b.n	8000422 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000466:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800046a:	625a      	str	r2, [r3, #36]	; 0x24
 800046c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800046e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000472:	9201      	str	r2, [sp, #4]
 8000474:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000476:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8000478:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800047a:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800047e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8000482:	6259      	str	r1, [r3, #36]	; 0x24
 8000484:	e7e1      	b.n	800044a <RCC_SetFlashLatencyFromMSIRange+0x36>
 8000486:	bf00      	nop
 8000488:	40023800 	.word	0x40023800
 800048c:	40023c00 	.word	0x40023c00
 8000490:	40007000 	.word	0x40007000

08000494 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000494:	6803      	ldr	r3, [r0, #0]
{
 8000496:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800049a:	07d9      	lsls	r1, r3, #31
{
 800049c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800049e:	d46a      	bmi.n	8000576 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004a0:	6823      	ldr	r3, [r4, #0]
 80004a2:	079a      	lsls	r2, r3, #30
 80004a4:	f100 80e6 	bmi.w	8000674 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80004a8:	6823      	ldr	r3, [r4, #0]
 80004aa:	06de      	lsls	r6, r3, #27
 80004ac:	d555      	bpl.n	800055a <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80004ae:	4dc1      	ldr	r5, [pc, #772]	; (80007b4 <HAL_RCC_OscConfig+0x320>)
 80004b0:	68ab      	ldr	r3, [r5, #8]
 80004b2:	f013 0f0c 	tst.w	r3, #12
 80004b6:	f040 8183 	bne.w	80007c0 <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004be:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80004c2:	6829      	ldr	r1, [r5, #0]
 80004c4:	fa93 f3a3 	rbit	r3, r3
 80004c8:	fab3 f383 	clz	r3, r3
 80004cc:	2201      	movs	r2, #1
 80004ce:	f003 031f 	and.w	r3, r3, #31
 80004d2:	fa02 f303 	lsl.w	r3, r2, r3
 80004d6:	420b      	tst	r3, r1
 80004d8:	d002      	beq.n	80004e0 <HAL_RCC_OscConfig+0x4c>
 80004da:	69a3      	ldr	r3, [r4, #24]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d06e      	beq.n	80005be <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80004e0:	4db4      	ldr	r5, [pc, #720]	; (80007b4 <HAL_RCC_OscConfig+0x320>)
 80004e2:	6a20      	ldr	r0, [r4, #32]
 80004e4:	686b      	ldr	r3, [r5, #4]
 80004e6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80004ea:	4298      	cmp	r0, r3
 80004ec:	f240 814a 	bls.w	8000784 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80004f0:	f7ff ff90 	bl	8000414 <RCC_SetFlashLatencyFromMSIRange>
 80004f4:	2800      	cmp	r0, #0
 80004f6:	d162      	bne.n	80005be <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80004f8:	686b      	ldr	r3, [r5, #4]
 80004fa:	6a22      	ldr	r2, [r4, #32]
 80004fc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000500:	4313      	orrs	r3, r2
 8000502:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000504:	6869      	ldr	r1, [r5, #4]
 8000506:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800050a:	fa93 f3a3 	rbit	r3, r3
 800050e:	fab3 f283 	clz	r2, r3
 8000512:	69e3      	ldr	r3, [r4, #28]
 8000514:	4093      	lsls	r3, r2
 8000516:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800051a:	4313      	orrs	r3, r2
 800051c:	606b      	str	r3, [r5, #4]
 800051e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000522:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000526:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800052a:	4ba2      	ldr	r3, [pc, #648]	; (80007b4 <HAL_RCC_OscConfig+0x320>)
 800052c:	21f0      	movs	r1, #240	; 0xf0
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	fa91 f1a1 	rbit	r1, r1
 8000534:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000538:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800053a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800053e:	40c3      	lsrs	r3, r0
 8000540:	1c58      	adds	r0, r3, #1
 8000542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000546:	40ca      	lsrs	r2, r1
 8000548:	499b      	ldr	r1, [pc, #620]	; (80007b8 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800054a:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800054c:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 800054e:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000550:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000552:	4a9a      	ldr	r2, [pc, #616]	; (80007bc <HAL_RCC_OscConfig+0x328>)
 8000554:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000556:	f001 fe3f 	bl	80021d8 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800055a:	6823      	ldr	r3, [r4, #0]
 800055c:	071d      	lsls	r5, r3, #28
 800055e:	f100 8191 	bmi.w	8000884 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	0758      	lsls	r0, r3, #29
 8000566:	f100 81d3 	bmi.w	8000910 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800056a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800056c:	2a00      	cmp	r2, #0
 800056e:	f040 8257 	bne.w	8000a20 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 8000572:	2000      	movs	r0, #0
 8000574:	e024      	b.n	80005c0 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000576:	4b8f      	ldr	r3, [pc, #572]	; (80007b4 <HAL_RCC_OscConfig+0x320>)
 8000578:	689a      	ldr	r2, [r3, #8]
 800057a:	f002 020c 	and.w	r2, r2, #12
 800057e:	2a08      	cmp	r2, #8
 8000580:	d007      	beq.n	8000592 <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000582:	689a      	ldr	r2, [r3, #8]
 8000584:	f002 020c 	and.w	r2, r2, #12
 8000588:	2a0c      	cmp	r2, #12
 800058a:	d11c      	bne.n	80005c6 <HAL_RCC_OscConfig+0x132>
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	03db      	lsls	r3, r3, #15
 8000590:	d519      	bpl.n	80005c6 <HAL_RCC_OscConfig+0x132>
 8000592:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000596:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800059a:	4a86      	ldr	r2, [pc, #536]	; (80007b4 <HAL_RCC_OscConfig+0x320>)
 800059c:	6811      	ldr	r1, [r2, #0]
 800059e:	fa93 f3a3 	rbit	r3, r3
 80005a2:	fab3 f383 	clz	r3, r3
 80005a6:	2201      	movs	r2, #1
 80005a8:	f003 031f 	and.w	r3, r3, #31
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	420b      	tst	r3, r1
 80005b2:	f43f af75 	beq.w	80004a0 <HAL_RCC_OscConfig+0xc>
 80005b6:	6863      	ldr	r3, [r4, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	f47f af71 	bne.w	80004a0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005be:	2001      	movs	r0, #1
}
 80005c0:	b003      	add	sp, #12
 80005c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005c6:	6863      	ldr	r3, [r4, #4]
 80005c8:	4d7a      	ldr	r5, [pc, #488]	; (80007b4 <HAL_RCC_OscConfig+0x320>)
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d120      	bne.n	8000610 <HAL_RCC_OscConfig+0x17c>
 80005ce:	682b      	ldr	r3, [r5, #0]
 80005d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80005d6:	f7ff fde7 	bl	80001a8 <HAL_GetTick>
 80005da:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80005de:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005e0:	2601      	movs	r6, #1
 80005e2:	4f74      	ldr	r7, [pc, #464]	; (80007b4 <HAL_RCC_OscConfig+0x320>)
 80005e4:	fa95 f3a5 	rbit	r3, r5
 80005e8:	683a      	ldr	r2, [r7, #0]
 80005ea:	fa95 f3a5 	rbit	r3, r5
 80005ee:	fab3 f383 	clz	r3, r3
 80005f2:	f003 031f 	and.w	r3, r3, #31
 80005f6:	fa06 f303 	lsl.w	r3, r6, r3
 80005fa:	4213      	tst	r3, r2
 80005fc:	f47f af50 	bne.w	80004a0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000600:	f7ff fdd2 	bl	80001a8 <HAL_GetTick>
 8000604:	eba0 0008 	sub.w	r0, r0, r8
 8000608:	2864      	cmp	r0, #100	; 0x64
 800060a:	d9eb      	bls.n	80005e4 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 800060c:	2003      	movs	r0, #3
 800060e:	e7d7      	b.n	80005c0 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000610:	bb13      	cbnz	r3, 8000658 <HAL_RCC_OscConfig+0x1c4>
 8000612:	682b      	ldr	r3, [r5, #0]
 8000614:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800061c:	602b      	str	r3, [r5, #0]
 800061e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000620:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000626:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000628:	f7ff fdbe 	bl	80001a8 <HAL_GetTick>
 800062c:	4680      	mov	r8, r0
 800062e:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000632:	682a      	ldr	r2, [r5, #0]
 8000634:	fa96 f3a6 	rbit	r3, r6
 8000638:	fab3 f383 	clz	r3, r3
 800063c:	f003 031f 	and.w	r3, r3, #31
 8000640:	fa07 f303 	lsl.w	r3, r7, r3
 8000644:	4213      	tst	r3, r2
 8000646:	f43f af2b 	beq.w	80004a0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800064a:	f7ff fdad 	bl	80001a8 <HAL_GetTick>
 800064e:	eba0 0008 	sub.w	r0, r0, r8
 8000652:	2864      	cmp	r0, #100	; 0x64
 8000654:	d9eb      	bls.n	800062e <HAL_RCC_OscConfig+0x19a>
 8000656:	e7d9      	b.n	800060c <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000658:	2b05      	cmp	r3, #5
 800065a:	682b      	ldr	r3, [r5, #0]
 800065c:	d103      	bne.n	8000666 <HAL_RCC_OscConfig+0x1d2>
 800065e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000662:	602b      	str	r3, [r5, #0]
 8000664:	e7b3      	b.n	80005ce <HAL_RCC_OscConfig+0x13a>
 8000666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800066a:	602b      	str	r3, [r5, #0]
 800066c:	682b      	ldr	r3, [r5, #0]
 800066e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000672:	e7af      	b.n	80005d4 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000674:	4b4f      	ldr	r3, [pc, #316]	; (80007b4 <HAL_RCC_OscConfig+0x320>)
 8000676:	689a      	ldr	r2, [r3, #8]
 8000678:	f002 020c 	and.w	r2, r2, #12
 800067c:	2a04      	cmp	r2, #4
 800067e:	d007      	beq.n	8000690 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000680:	689a      	ldr	r2, [r3, #8]
 8000682:	f002 020c 	and.w	r2, r2, #12
 8000686:	2a0c      	cmp	r2, #12
 8000688:	d124      	bne.n	80006d4 <HAL_RCC_OscConfig+0x240>
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	03df      	lsls	r7, r3, #15
 800068e:	d421      	bmi.n	80006d4 <HAL_RCC_OscConfig+0x240>
 8000690:	2302      	movs	r3, #2
 8000692:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000696:	4a47      	ldr	r2, [pc, #284]	; (80007b4 <HAL_RCC_OscConfig+0x320>)
 8000698:	6810      	ldr	r0, [r2, #0]
 800069a:	fa93 f3a3 	rbit	r3, r3
 800069e:	fab3 f383 	clz	r3, r3
 80006a2:	2101      	movs	r1, #1
 80006a4:	f003 031f 	and.w	r3, r3, #31
 80006a8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ac:	4203      	tst	r3, r0
 80006ae:	4613      	mov	r3, r2
 80006b0:	d002      	beq.n	80006b8 <HAL_RCC_OscConfig+0x224>
 80006b2:	68e2      	ldr	r2, [r4, #12]
 80006b4:	428a      	cmp	r2, r1
 80006b6:	d182      	bne.n	80005be <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006b8:	6858      	ldr	r0, [r3, #4]
 80006ba:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 80006be:	fa92 f2a2 	rbit	r2, r2
 80006c2:	fab2 f182 	clz	r1, r2
 80006c6:	6922      	ldr	r2, [r4, #16]
 80006c8:	408a      	lsls	r2, r1
 80006ca:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 80006ce:	430a      	orrs	r2, r1
 80006d0:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006d2:	e6e9      	b.n	80004a8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006d4:	68e2      	ldr	r2, [r4, #12]
 80006d6:	2501      	movs	r5, #1
 80006d8:	b382      	cbz	r2, 800073c <HAL_RCC_OscConfig+0x2a8>
 80006da:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 80006de:	fab3 f383 	clz	r3, r3
 80006e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006e6:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80006ee:	f7ff fd5b 	bl	80001a8 <HAL_GetTick>
 80006f2:	2702      	movs	r7, #2
 80006f4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006f6:	4e2f      	ldr	r6, [pc, #188]	; (80007b4 <HAL_RCC_OscConfig+0x320>)
 80006f8:	fa97 f3a7 	rbit	r3, r7
 80006fc:	6832      	ldr	r2, [r6, #0]
 80006fe:	fa97 f3a7 	rbit	r3, r7
 8000702:	fab3 f383 	clz	r3, r3
 8000706:	f003 031f 	and.w	r3, r3, #31
 800070a:	fa05 f303 	lsl.w	r3, r5, r3
 800070e:	4213      	tst	r3, r2
 8000710:	d00d      	beq.n	800072e <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000712:	6871      	ldr	r1, [r6, #4]
 8000714:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000718:	fa93 f3a3 	rbit	r3, r3
 800071c:	fab3 f283 	clz	r2, r3
 8000720:	6923      	ldr	r3, [r4, #16]
 8000722:	4093      	lsls	r3, r2
 8000724:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 8000728:	4313      	orrs	r3, r2
 800072a:	6073      	str	r3, [r6, #4]
 800072c:	e6bc      	b.n	80004a8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800072e:	f7ff fd3b 	bl	80001a8 <HAL_GetTick>
 8000732:	eba0 0008 	sub.w	r0, r0, r8
 8000736:	2802      	cmp	r0, #2
 8000738:	d9de      	bls.n	80006f8 <HAL_RCC_OscConfig+0x264>
 800073a:	e767      	b.n	800060c <HAL_RCC_OscConfig+0x178>
 800073c:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000740:	fab3 f383 	clz	r3, r3
 8000744:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000748:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000750:	f7ff fd2a 	bl	80001a8 <HAL_GetTick>
 8000754:	2602      	movs	r6, #2
 8000756:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000758:	4f16      	ldr	r7, [pc, #88]	; (80007b4 <HAL_RCC_OscConfig+0x320>)
 800075a:	fa96 f3a6 	rbit	r3, r6
 800075e:	683a      	ldr	r2, [r7, #0]
 8000760:	fa96 f3a6 	rbit	r3, r6
 8000764:	fab3 f383 	clz	r3, r3
 8000768:	f003 031f 	and.w	r3, r3, #31
 800076c:	fa05 f303 	lsl.w	r3, r5, r3
 8000770:	4213      	tst	r3, r2
 8000772:	f43f ae99 	beq.w	80004a8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000776:	f7ff fd17 	bl	80001a8 <HAL_GetTick>
 800077a:	eba0 0008 	sub.w	r0, r0, r8
 800077e:	2802      	cmp	r0, #2
 8000780:	d9eb      	bls.n	800075a <HAL_RCC_OscConfig+0x2c6>
 8000782:	e743      	b.n	800060c <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000784:	686b      	ldr	r3, [r5, #4]
 8000786:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800078a:	4303      	orrs	r3, r0
 800078c:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800078e:	6869      	ldr	r1, [r5, #4]
 8000790:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000794:	fa93 f3a3 	rbit	r3, r3
 8000798:	fab3 f283 	clz	r2, r3
 800079c:	69e3      	ldr	r3, [r4, #28]
 800079e:	4093      	lsls	r3, r2
 80007a0:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80007a4:	4313      	orrs	r3, r2
 80007a6:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80007a8:	f7ff fe34 	bl	8000414 <RCC_SetFlashLatencyFromMSIRange>
 80007ac:	2800      	cmp	r0, #0
 80007ae:	f43f aeb6 	beq.w	800051e <HAL_RCC_OscConfig+0x8a>
 80007b2:	e704      	b.n	80005be <HAL_RCC_OscConfig+0x12a>
 80007b4:	40023800 	.word	0x40023800
 80007b8:	080023d0 	.word	0x080023d0
 80007bc:	20000004 	.word	0x20000004
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80007c0:	69a2      	ldr	r2, [r4, #24]
 80007c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	d037      	beq.n	800083a <HAL_RCC_OscConfig+0x3a6>
 80007ca:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 80007ce:	fab3 f383 	clz	r3, r3
 80007d2:	2601      	movs	r6, #1
 80007d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80007d8:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80007e0:	f7ff fce2 	bl	80001a8 <HAL_GetTick>
 80007e4:	f44f 7700 	mov.w	r7, #512	; 0x200
 80007e8:	4680      	mov	r8, r0
 80007ea:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80007ee:	682a      	ldr	r2, [r5, #0]
 80007f0:	fa97 f3a7 	rbit	r3, r7
 80007f4:	fab3 f383 	clz	r3, r3
 80007f8:	f003 031f 	and.w	r3, r3, #31
 80007fc:	fa06 f303 	lsl.w	r3, r6, r3
 8000800:	4213      	tst	r3, r2
 8000802:	d013      	beq.n	800082c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000804:	686b      	ldr	r3, [r5, #4]
 8000806:	6a22      	ldr	r2, [r4, #32]
 8000808:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800080c:	4313      	orrs	r3, r2
 800080e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000810:	6869      	ldr	r1, [r5, #4]
 8000812:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000816:	fa93 f3a3 	rbit	r3, r3
 800081a:	fab3 f283 	clz	r2, r3
 800081e:	69e3      	ldr	r3, [r4, #28]
 8000820:	4093      	lsls	r3, r2
 8000822:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000826:	4313      	orrs	r3, r2
 8000828:	606b      	str	r3, [r5, #4]
 800082a:	e696      	b.n	800055a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800082c:	f7ff fcbc 	bl	80001a8 <HAL_GetTick>
 8000830:	eba0 0008 	sub.w	r0, r0, r8
 8000834:	2802      	cmp	r0, #2
 8000836:	d9d8      	bls.n	80007ea <HAL_RCC_OscConfig+0x356>
 8000838:	e6e8      	b.n	800060c <HAL_RCC_OscConfig+0x178>
 800083a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 800083e:	fab3 f383 	clz	r3, r3
 8000842:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000846:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800084e:	f7ff fcab 	bl	80001a8 <HAL_GetTick>
 8000852:	f44f 7600 	mov.w	r6, #512	; 0x200
 8000856:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8000858:	2701      	movs	r7, #1
 800085a:	fa96 f3a6 	rbit	r3, r6
 800085e:	682a      	ldr	r2, [r5, #0]
 8000860:	fa96 f3a6 	rbit	r3, r6
 8000864:	fab3 f383 	clz	r3, r3
 8000868:	f003 031f 	and.w	r3, r3, #31
 800086c:	fa07 f303 	lsl.w	r3, r7, r3
 8000870:	4213      	tst	r3, r2
 8000872:	f43f ae72 	beq.w	800055a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000876:	f7ff fc97 	bl	80001a8 <HAL_GetTick>
 800087a:	eba0 0008 	sub.w	r0, r0, r8
 800087e:	2802      	cmp	r0, #2
 8000880:	d9eb      	bls.n	800085a <HAL_RCC_OscConfig+0x3c6>
 8000882:	e6c3      	b.n	800060c <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000884:	6962      	ldr	r2, [r4, #20]
 8000886:	2501      	movs	r5, #1
 8000888:	49a9      	ldr	r1, [pc, #676]	; (8000b30 <HAL_RCC_OscConfig+0x69c>)
 800088a:	b302      	cbz	r2, 80008ce <HAL_RCC_OscConfig+0x43a>
 800088c:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 8000890:	fab3 f383 	clz	r3, r3
 8000894:	440b      	add	r3, r1
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 800089a:	f7ff fc85 	bl	80001a8 <HAL_GetTick>
 800089e:	2602      	movs	r6, #2
 80008a0:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008a2:	4fa4      	ldr	r7, [pc, #656]	; (8000b34 <HAL_RCC_OscConfig+0x6a0>)
 80008a4:	fa96 f3a6 	rbit	r3, r6
 80008a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008aa:	fa96 f3a6 	rbit	r3, r6
 80008ae:	fab3 f383 	clz	r3, r3
 80008b2:	f003 031f 	and.w	r3, r3, #31
 80008b6:	fa05 f303 	lsl.w	r3, r5, r3
 80008ba:	4213      	tst	r3, r2
 80008bc:	f47f ae51 	bne.w	8000562 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008c0:	f7ff fc72 	bl	80001a8 <HAL_GetTick>
 80008c4:	eba0 0008 	sub.w	r0, r0, r8
 80008c8:	2802      	cmp	r0, #2
 80008ca:	d9eb      	bls.n	80008a4 <HAL_RCC_OscConfig+0x410>
 80008cc:	e69e      	b.n	800060c <HAL_RCC_OscConfig+0x178>
 80008ce:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 80008d2:	fab3 f383 	clz	r3, r3
 80008d6:	440b      	add	r3, r1
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80008dc:	f7ff fc64 	bl	80001a8 <HAL_GetTick>
 80008e0:	2602      	movs	r6, #2
 80008e2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008e4:	4f93      	ldr	r7, [pc, #588]	; (8000b34 <HAL_RCC_OscConfig+0x6a0>)
 80008e6:	fa96 f3a6 	rbit	r3, r6
 80008ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008ec:	fa96 f3a6 	rbit	r3, r6
 80008f0:	fab3 f383 	clz	r3, r3
 80008f4:	f003 031f 	and.w	r3, r3, #31
 80008f8:	fa05 f303 	lsl.w	r3, r5, r3
 80008fc:	4213      	tst	r3, r2
 80008fe:	f43f ae30 	beq.w	8000562 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000902:	f7ff fc51 	bl	80001a8 <HAL_GetTick>
 8000906:	eba0 0008 	sub.w	r0, r0, r8
 800090a:	2802      	cmp	r0, #2
 800090c:	d9eb      	bls.n	80008e6 <HAL_RCC_OscConfig+0x452>
 800090e:	e67d      	b.n	800060c <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000910:	4b88      	ldr	r3, [pc, #544]	; (8000b34 <HAL_RCC_OscConfig+0x6a0>)
 8000912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000914:	00d1      	lsls	r1, r2, #3
 8000916:	d434      	bmi.n	8000982 <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8000918:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800091c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
 8000922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000928:	9301      	str	r3, [sp, #4]
 800092a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800092c:	4d82      	ldr	r5, [pc, #520]	; (8000b38 <HAL_RCC_OscConfig+0x6a4>)
 800092e:	682b      	ldr	r3, [r5, #0]
 8000930:	05da      	lsls	r2, r3, #23
 8000932:	d528      	bpl.n	8000986 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000934:	68a3      	ldr	r3, [r4, #8]
 8000936:	4d7f      	ldr	r5, [pc, #508]	; (8000b34 <HAL_RCC_OscConfig+0x6a0>)
 8000938:	2b01      	cmp	r3, #1
 800093a:	d134      	bne.n	80009a6 <HAL_RCC_OscConfig+0x512>
 800093c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800093e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000942:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000944:	f7ff fc30 	bl	80001a8 <HAL_GetTick>
 8000948:	f44f 7500 	mov.w	r5, #512	; 0x200
 800094c:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800094e:	2701      	movs	r7, #1
 8000950:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8000b34 <HAL_RCC_OscConfig+0x6a0>
 8000954:	fa95 f3a5 	rbit	r3, r5
 8000958:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800095c:	fa95 f3a5 	rbit	r3, r5
 8000960:	fab3 f383 	clz	r3, r3
 8000964:	f003 031f 	and.w	r3, r3, #31
 8000968:	fa07 f303 	lsl.w	r3, r7, r3
 800096c:	4213      	tst	r3, r2
 800096e:	d04e      	beq.n	8000a0e <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 8000970:	2e00      	cmp	r6, #0
 8000972:	f43f adfa 	beq.w	800056a <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000976:	4a6f      	ldr	r2, [pc, #444]	; (8000b34 <HAL_RCC_OscConfig+0x6a0>)
 8000978:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800097a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800097e:	6253      	str	r3, [r2, #36]	; 0x24
 8000980:	e5f3      	b.n	800056a <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8000982:	2600      	movs	r6, #0
 8000984:	e7d2      	b.n	800092c <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000986:	682b      	ldr	r3, [r5, #0]
 8000988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800098e:	f7ff fc0b 	bl	80001a8 <HAL_GetTick>
 8000992:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	05db      	lsls	r3, r3, #23
 8000998:	d4cc      	bmi.n	8000934 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800099a:	f7ff fc05 	bl	80001a8 <HAL_GetTick>
 800099e:	1bc0      	subs	r0, r0, r7
 80009a0:	2864      	cmp	r0, #100	; 0x64
 80009a2:	d9f7      	bls.n	8000994 <HAL_RCC_OscConfig+0x500>
 80009a4:	e632      	b.n	800060c <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009a6:	bb23      	cbnz	r3, 80009f2 <HAL_RCC_OscConfig+0x55e>
 80009a8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80009aa:	f44f 7700 	mov.w	r7, #512	; 0x200
 80009ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009b2:	636b      	str	r3, [r5, #52]	; 0x34
 80009b4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009b6:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009be:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80009c0:	f7ff fbf2 	bl	80001a8 <HAL_GetTick>
 80009c4:	4681      	mov	r9, r0
 80009c6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009ca:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80009cc:	fa97 f3a7 	rbit	r3, r7
 80009d0:	fab3 f383 	clz	r3, r3
 80009d4:	f003 031f 	and.w	r3, r3, #31
 80009d8:	fa08 f303 	lsl.w	r3, r8, r3
 80009dc:	4213      	tst	r3, r2
 80009de:	d0c7      	beq.n	8000970 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009e0:	f7ff fbe2 	bl	80001a8 <HAL_GetTick>
 80009e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80009e8:	eba0 0009 	sub.w	r0, r0, r9
 80009ec:	4298      	cmp	r0, r3
 80009ee:	d9ea      	bls.n	80009c6 <HAL_RCC_OscConfig+0x532>
 80009f0:	e60c      	b.n	800060c <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009f2:	2b05      	cmp	r3, #5
 80009f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80009f6:	d103      	bne.n	8000a00 <HAL_RCC_OscConfig+0x56c>
 80009f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fc:	636b      	str	r3, [r5, #52]	; 0x34
 80009fe:	e79d      	b.n	800093c <HAL_RCC_OscConfig+0x4a8>
 8000a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a04:	636b      	str	r3, [r5, #52]	; 0x34
 8000a06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a0c:	e799      	b.n	8000942 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a0e:	f7ff fbcb 	bl	80001a8 <HAL_GetTick>
 8000a12:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a16:	eba0 0009 	sub.w	r0, r0, r9
 8000a1a:	4298      	cmp	r0, r3
 8000a1c:	d99a      	bls.n	8000954 <HAL_RCC_OscConfig+0x4c0>
 8000a1e:	e5f5      	b.n	800060c <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a20:	4d44      	ldr	r5, [pc, #272]	; (8000b34 <HAL_RCC_OscConfig+0x6a0>)
 8000a22:	68ab      	ldr	r3, [r5, #8]
 8000a24:	f003 030c 	and.w	r3, r3, #12
 8000a28:	2b0c      	cmp	r3, #12
 8000a2a:	f43f adc8 	beq.w	80005be <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a2e:	2a02      	cmp	r2, #2
 8000a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a34:	d156      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x650>
 8000a36:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a3a:	fab3 f383 	clz	r3, r3
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a44:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a4c:	f7ff fbac 	bl	80001a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a50:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8000a52:	4680      	mov	r8, r0
 8000a54:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a58:	2501      	movs	r5, #1
 8000a5a:	fa97 f3a7 	rbit	r3, r7
 8000a5e:	6832      	ldr	r2, [r6, #0]
 8000a60:	fa97 f3a7 	rbit	r3, r7
 8000a64:	fab3 f383 	clz	r3, r3
 8000a68:	f003 031f 	and.w	r3, r3, #31
 8000a6c:	fa05 f303 	lsl.w	r3, r5, r3
 8000a70:	4213      	tst	r3, r2
 8000a72:	d130      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a74:	68b2      	ldr	r2, [r6, #8]
 8000a76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a78:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000a7a:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8000a7e:	430b      	orrs	r3, r1
 8000a80:	4313      	orrs	r3, r2
 8000a82:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000a84:	4313      	orrs	r3, r2
 8000a86:	60b3      	str	r3, [r6, #8]
 8000a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a8c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000a90:	fab3 f383 	clz	r3, r3
 8000a94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a98:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000aa0:	f7ff fb82 	bl	80001a8 <HAL_GetTick>
 8000aa4:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000aa8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000aaa:	2501      	movs	r5, #1
 8000aac:	4e21      	ldr	r6, [pc, #132]	; (8000b34 <HAL_RCC_OscConfig+0x6a0>)
 8000aae:	fa94 f3a4 	rbit	r3, r4
 8000ab2:	6832      	ldr	r2, [r6, #0]
 8000ab4:	fa94 f3a4 	rbit	r3, r4
 8000ab8:	fab3 f383 	clz	r3, r3
 8000abc:	f003 031f 	and.w	r3, r3, #31
 8000ac0:	fa05 f303 	lsl.w	r3, r5, r3
 8000ac4:	4213      	tst	r3, r2
 8000ac6:	f47f ad54 	bne.w	8000572 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aca:	f7ff fb6d 	bl	80001a8 <HAL_GetTick>
 8000ace:	1bc0      	subs	r0, r0, r7
 8000ad0:	2802      	cmp	r0, #2
 8000ad2:	d9ec      	bls.n	8000aae <HAL_RCC_OscConfig+0x61a>
 8000ad4:	e59a      	b.n	800060c <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ad6:	f7ff fb67 	bl	80001a8 <HAL_GetTick>
 8000ada:	eba0 0008 	sub.w	r0, r0, r8
 8000ade:	2802      	cmp	r0, #2
 8000ae0:	d9bb      	bls.n	8000a5a <HAL_RCC_OscConfig+0x5c6>
 8000ae2:	e593      	b.n	800060c <HAL_RCC_OscConfig+0x178>
 8000ae4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000ae8:	fab3 f383 	clz	r3, r3
 8000aec:	2200      	movs	r2, #0
 8000aee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000af2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000afa:	f7ff fb55 	bl	80001a8 <HAL_GetTick>
 8000afe:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000b02:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b04:	2601      	movs	r6, #1
 8000b06:	fa94 f3a4 	rbit	r3, r4
 8000b0a:	682a      	ldr	r2, [r5, #0]
 8000b0c:	fa94 f3a4 	rbit	r3, r4
 8000b10:	fab3 f383 	clz	r3, r3
 8000b14:	f003 031f 	and.w	r3, r3, #31
 8000b18:	fa06 f303 	lsl.w	r3, r6, r3
 8000b1c:	4213      	tst	r3, r2
 8000b1e:	f43f ad28 	beq.w	8000572 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b22:	f7ff fb41 	bl	80001a8 <HAL_GetTick>
 8000b26:	1bc0      	subs	r0, r0, r7
 8000b28:	2802      	cmp	r0, #2
 8000b2a:	d9ec      	bls.n	8000b06 <HAL_RCC_OscConfig+0x672>
 8000b2c:	e56e      	b.n	800060c <HAL_RCC_OscConfig+0x178>
 8000b2e:	bf00      	nop
 8000b30:	1091c1a0 	.word	0x1091c1a0
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40007000 	.word	0x40007000

08000b3c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000b3c:	491e      	ldr	r1, [pc, #120]	; (8000bb8 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8000b3e:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000b40:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8000b42:	f003 020c 	and.w	r2, r3, #12
 8000b46:	2a08      	cmp	r2, #8
 8000b48:	d005      	beq.n	8000b56 <HAL_RCC_GetSysClockFreq+0x1a>
 8000b4a:	2a0c      	cmp	r2, #12
 8000b4c:	d005      	beq.n	8000b5a <HAL_RCC_GetSysClockFreq+0x1e>
 8000b4e:	2a04      	cmp	r2, #4
 8000b50:	d122      	bne.n	8000b98 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8000b52:	481a      	ldr	r0, [pc, #104]	; (8000bbc <HAL_RCC_GetSysClockFreq+0x80>)
}
 8000b54:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000b56:	481a      	ldr	r0, [pc, #104]	; (8000bc0 <HAL_RCC_GetSysClockFreq+0x84>)
 8000b58:	bd10      	pop	{r4, pc}
 8000b5a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000b5e:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000b62:	fab2 f282 	clz	r2, r2
 8000b66:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8000b6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b6e:	4815      	ldr	r0, [pc, #84]	; (8000bc4 <HAL_RCC_GetSysClockFreq+0x88>)
 8000b70:	5c84      	ldrb	r4, [r0, r2]
 8000b72:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8000b76:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000b7a:	fab0 f280 	clz	r2, r0
 8000b7e:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b82:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000b84:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b86:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8000b88:	bf4c      	ite	mi
 8000b8a:	4b0d      	ldrmi	r3, [pc, #52]	; (8000bc0 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8000b8c:	4b0b      	ldrpl	r3, [pc, #44]	; (8000bbc <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000b8e:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8000b90:	4363      	muls	r3, r4
 8000b92:	fbb3 f0f0 	udiv	r0, r3, r0
 8000b96:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000b98:	6848      	ldr	r0, [r1, #4]
 8000b9a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b9e:	fa93 f3a3 	rbit	r3, r3
 8000ba2:	fab3 f383 	clz	r3, r3
 8000ba6:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8000baa:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8000bac:	1c43      	adds	r3, r0, #1
 8000bae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000bb2:	4098      	lsls	r0, r3
 8000bb4:	bd10      	pop	{r4, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	00f42400 	.word	0x00f42400
 8000bc0:	007a1200 	.word	0x007a1200
 8000bc4:	080023e8 	.word	0x080023e8

08000bc8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bc8:	4b6a      	ldr	r3, [pc, #424]	; (8000d74 <HAL_RCC_ClockConfig+0x1ac>)
{
 8000bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bce:	681a      	ldr	r2, [r3, #0]
{
 8000bd0:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bd2:	f002 0201 	and.w	r2, r2, #1
 8000bd6:	428a      	cmp	r2, r1
{
 8000bd8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bda:	d330      	bcc.n	8000c3e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bdc:	6832      	ldr	r2, [r6, #0]
 8000bde:	0794      	lsls	r4, r2, #30
 8000be0:	d440      	bmi.n	8000c64 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000be2:	07d0      	lsls	r0, r2, #31
 8000be4:	d446      	bmi.n	8000c74 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000be6:	4b63      	ldr	r3, [pc, #396]	; (8000d74 <HAL_RCC_ClockConfig+0x1ac>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	f002 0201 	and.w	r2, r2, #1
 8000bee:	4295      	cmp	r5, r2
 8000bf0:	f0c0 80ae 	bcc.w	8000d50 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bf4:	6832      	ldr	r2, [r6, #0]
 8000bf6:	0751      	lsls	r1, r2, #29
 8000bf8:	f100 80b3 	bmi.w	8000d62 <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bfc:	0713      	lsls	r3, r2, #28
 8000bfe:	d507      	bpl.n	8000c10 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c00:	4a5d      	ldr	r2, [pc, #372]	; (8000d78 <HAL_RCC_ClockConfig+0x1b0>)
 8000c02:	6931      	ldr	r1, [r6, #16]
 8000c04:	6893      	ldr	r3, [r2, #8]
 8000c06:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c0a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c0e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000c10:	f7ff ff94 	bl	8000b3c <HAL_RCC_GetSysClockFreq>
 8000c14:	4b58      	ldr	r3, [pc, #352]	; (8000d78 <HAL_RCC_ClockConfig+0x1b0>)
 8000c16:	22f0      	movs	r2, #240	; 0xf0
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	fa92 f2a2 	rbit	r2, r2
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	4a54      	ldr	r2, [pc, #336]	; (8000d7c <HAL_RCC_ClockConfig+0x1b4>)
 8000c2a:	5cd3      	ldrb	r3, [r2, r3]
 8000c2c:	40d8      	lsrs	r0, r3
 8000c2e:	4b54      	ldr	r3, [pc, #336]	; (8000d80 <HAL_RCC_ClockConfig+0x1b8>)
 8000c30:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f001 fad0 	bl	80021d8 <HAL_InitTick>
  return HAL_OK;
 8000c38:	2000      	movs	r0, #0
}
 8000c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c3e:	2901      	cmp	r1, #1
 8000c40:	bf02      	ittt	eq
 8000c42:	681a      	ldreq	r2, [r3, #0]
 8000c44:	f042 0204 	orreq.w	r2, r2, #4
 8000c48:	601a      	streq	r2, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	f022 0201 	bic.w	r2, r2, #1
 8000c50:	430a      	orrs	r2, r1
 8000c52:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d0be      	beq.n	8000bdc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000c5e:	2001      	movs	r0, #1
 8000c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c64:	4944      	ldr	r1, [pc, #272]	; (8000d78 <HAL_RCC_ClockConfig+0x1b0>)
 8000c66:	68b0      	ldr	r0, [r6, #8]
 8000c68:	688b      	ldr	r3, [r1, #8]
 8000c6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c6e:	4303      	orrs	r3, r0
 8000c70:	608b      	str	r3, [r1, #8]
 8000c72:	e7b6      	b.n	8000be2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c74:	6872      	ldr	r2, [r6, #4]
 8000c76:	4940      	ldr	r1, [pc, #256]	; (8000d78 <HAL_RCC_ClockConfig+0x1b0>)
 8000c78:	2a02      	cmp	r2, #2
 8000c7a:	d10f      	bne.n	8000c9c <HAL_RCC_ClockConfig+0xd4>
 8000c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c80:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000c84:	6808      	ldr	r0, [r1, #0]
 8000c86:	fa93 f3a3 	rbit	r3, r3
 8000c8a:	fab3 f383 	clz	r3, r3
 8000c8e:	2101      	movs	r1, #1
 8000c90:	f003 031f 	and.w	r3, r3, #31
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	4203      	tst	r3, r0
 8000c9a:	e013      	b.n	8000cc4 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c9c:	2a03      	cmp	r2, #3
 8000c9e:	d102      	bne.n	8000ca6 <HAL_RCC_ClockConfig+0xde>
 8000ca0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ca4:	e7ec      	b.n	8000c80 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000ca6:	2a01      	cmp	r2, #1
 8000ca8:	d129      	bne.n	8000cfe <HAL_RCC_ClockConfig+0x136>
 8000caa:	2302      	movs	r3, #2
 8000cac:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb0:	6809      	ldr	r1, [r1, #0]
 8000cb2:	fa93 f3a3 	rbit	r3, r3
 8000cb6:	fab3 f383 	clz	r3, r3
 8000cba:	f003 031f 	and.w	r3, r3, #31
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000cc4:	d0cb      	beq.n	8000c5e <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cc6:	4c2c      	ldr	r4, [pc, #176]	; (8000d78 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cc8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ccc:	68a3      	ldr	r3, [r4, #8]
 8000cce:	f023 0303 	bic.w	r3, r3, #3
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8000cd6:	f7ff fa67 	bl	80001a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cda:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000cdc:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d110      	bne.n	8000d04 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce2:	68a3      	ldr	r3, [r4, #8]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
 8000ce8:	2b08      	cmp	r3, #8
 8000cea:	f43f af7c 	beq.w	8000be6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cee:	f7ff fa5b 	bl	80001a8 <HAL_GetTick>
 8000cf2:	1bc0      	subs	r0, r0, r7
 8000cf4:	4540      	cmp	r0, r8
 8000cf6:	d9f4      	bls.n	8000ce2 <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d02:	e7bd      	b.n	8000c80 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d10b      	bne.n	8000d20 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d08:	68a3      	ldr	r3, [r4, #8]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
 8000d0e:	2b0c      	cmp	r3, #12
 8000d10:	f43f af69 	beq.w	8000be6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d14:	f7ff fa48 	bl	80001a8 <HAL_GetTick>
 8000d18:	1bc0      	subs	r0, r0, r7
 8000d1a:	4540      	cmp	r0, r8
 8000d1c:	d9f4      	bls.n	8000d08 <HAL_RCC_ClockConfig+0x140>
 8000d1e:	e7eb      	b.n	8000cf8 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d110      	bne.n	8000d46 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d24:	68a3      	ldr	r3, [r4, #8]
 8000d26:	f003 030c 	and.w	r3, r3, #12
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	f43f af5b 	beq.w	8000be6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d30:	f7ff fa3a 	bl	80001a8 <HAL_GetTick>
 8000d34:	1bc0      	subs	r0, r0, r7
 8000d36:	4540      	cmp	r0, r8
 8000d38:	d9f4      	bls.n	8000d24 <HAL_RCC_ClockConfig+0x15c>
 8000d3a:	e7dd      	b.n	8000cf8 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d3c:	f7ff fa34 	bl	80001a8 <HAL_GetTick>
 8000d40:	1bc0      	subs	r0, r0, r7
 8000d42:	4540      	cmp	r0, r8
 8000d44:	d8d8      	bhi.n	8000cf8 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000d46:	68a3      	ldr	r3, [r4, #8]
 8000d48:	f013 0f0c 	tst.w	r3, #12
 8000d4c:	d1f6      	bne.n	8000d3c <HAL_RCC_ClockConfig+0x174>
 8000d4e:	e74a      	b.n	8000be6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	f022 0201 	bic.w	r2, r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	07da      	lsls	r2, r3, #31
 8000d5c:	f53f af7f 	bmi.w	8000c5e <HAL_RCC_ClockConfig+0x96>
 8000d60:	e748      	b.n	8000bf4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d62:	4905      	ldr	r1, [pc, #20]	; (8000d78 <HAL_RCC_ClockConfig+0x1b0>)
 8000d64:	68f0      	ldr	r0, [r6, #12]
 8000d66:	688b      	ldr	r3, [r1, #8]
 8000d68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d6c:	4303      	orrs	r3, r0
 8000d6e:	608b      	str	r3, [r1, #8]
 8000d70:	e744      	b.n	8000bfc <HAL_RCC_ClockConfig+0x34>
 8000d72:	bf00      	nop
 8000d74:	40023c00 	.word	0x40023c00
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	080023d0 	.word	0x080023d0
 8000d80:	20000004 	.word	0x20000004

08000d84 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	fa92 f2a2 	rbit	r2, r2
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d98:	40d3      	lsrs	r3, r2
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_RCC_GetPCLK1Freq+0x28>)
 8000d9c:	5cd3      	ldrb	r3, [r2, r3]
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000da0:	6810      	ldr	r0, [r2, #0]
}    
 8000da2:	40d8      	lsrs	r0, r3
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	080023e0 	.word	0x080023e0
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000db6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	fa92 f2a2 	rbit	r2, r2
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000dc8:	40d3      	lsrs	r3, r2
 8000dca:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_RCC_GetPCLK2Freq+0x28>)
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000dd0:	6810      	ldr	r0, [r2, #0]
} 
 8000dd2:	40d8      	lsrs	r0, r3
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	080023e0 	.word	0x080023e0
 8000de0:	20000004 	.word	0x20000004

08000de4 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000de4:	230f      	movs	r3, #15
 8000de6:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_RCC_GetClockConfig+0x34>)
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	f002 0203 	and.w	r2, r2, #3
 8000df0:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000df8:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000e00:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	08db      	lsrs	r3, r3, #3
 8000e06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000e0a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_RCC_GetClockConfig+0x38>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	600b      	str	r3, [r1, #0]
 8000e16:	4770      	bx	lr
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8000e24:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e26:	d00e      	beq.n	8000e46 <TIM_Base_SetConfig+0x26>
 8000e28:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <TIM_Base_SetConfig+0x7c>)
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	d00b      	beq.n	8000e46 <TIM_Base_SetConfig+0x26>
 8000e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d007      	beq.n	8000e46 <TIM_Base_SetConfig+0x26>
 8000e36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	d003      	beq.n	8000e46 <TIM_Base_SetConfig+0x26>
 8000e3e:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d116      	bne.n	8000e74 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e46:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 8000e50:	ea43 0302 	orr.w	r3, r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e54:	d015      	beq.n	8000e82 <TIM_Base_SetConfig+0x62>
 8000e56:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <TIM_Base_SetConfig+0x7c>)
 8000e58:	4290      	cmp	r0, r2
 8000e5a:	d012      	beq.n	8000e82 <TIM_Base_SetConfig+0x62>
 8000e5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e60:	4290      	cmp	r0, r2
 8000e62:	d00e      	beq.n	8000e82 <TIM_Base_SetConfig+0x62>
 8000e64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e68:	4290      	cmp	r0, r2
 8000e6a:	d00a      	beq.n	8000e82 <TIM_Base_SetConfig+0x62>
 8000e6c:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8000e70:	4290      	cmp	r0, r2
 8000e72:	d006      	beq.n	8000e82 <TIM_Base_SetConfig+0x62>
 8000e74:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <TIM_Base_SetConfig+0x80>)
 8000e76:	4290      	cmp	r0, r2
 8000e78:	d003      	beq.n	8000e82 <TIM_Base_SetConfig+0x62>
 8000e7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e7e:	4290      	cmp	r0, r2
 8000e80:	d103      	bne.n	8000e8a <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e82:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e88:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000e8a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000e8c:	688b      	ldr	r3, [r1, #8]
 8000e8e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000e90:	680b      	ldr	r3, [r1, #0]
 8000e92:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler */
  TIMx->EGR = TIM_EGR_UG;
 8000e94:	2301      	movs	r3, #1
 8000e96:	6143      	str	r3, [r0, #20]
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40000400 	.word	0x40000400
 8000ea0:	40010c00 	.word	0x40010c00

08000ea4 <HAL_TIM_Base_MspInit>:
 8000ea4:	4770      	bx	lr

08000ea6 <HAL_TIM_Base_Init>:
{
 8000ea6:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000ea8:	4604      	mov	r4, r0
 8000eaa:	b1a0      	cbz	r0, 8000ed6 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000eac:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000eb0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000eb4:	b91b      	cbnz	r3, 8000ebe <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000eb6:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_Base_MspInit(htim);
 8000eba:	f7ff fff3 	bl	8000ea4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000ebe:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ec0:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000ec2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ec6:	1d21      	adds	r1, r4, #4
 8000ec8:	f7ff ffaa 	bl	8000e20 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000ecc:	2301      	movs	r3, #1
  return HAL_OK;
 8000ece:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000ed0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000ed4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ed6:	2001      	movs	r0, #1
}
 8000ed8:	bd10      	pop	{r4, pc}

08000eda <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000eda:	6803      	ldr	r3, [r0, #0]
}
 8000edc:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	f042 0201 	orr.w	r2, r2, #1
 8000ee4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	f042 0201 	orr.w	r2, r2, #1
 8000eec:	601a      	str	r2, [r3, #0]
}
 8000eee:	4770      	bx	lr

08000ef0 <HAL_TIM_OC_DelayElapsedCallback>:
 8000ef0:	4770      	bx	lr

08000ef2 <HAL_TIM_IC_CaptureCallback>:
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_TIM_TriggerCallback>:
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ef8:	6803      	ldr	r3, [r0, #0]
{
 8000efa:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000efc:	691a      	ldr	r2, [r3, #16]
{
 8000efe:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f00:	0791      	lsls	r1, r2, #30
 8000f02:	d50e      	bpl.n	8000f22 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	0792      	lsls	r2, r2, #30
 8000f08:	d50b      	bpl.n	8000f22 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000f0a:	f06f 0202 	mvn.w	r2, #2
 8000f0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f10:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000f12:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f14:	7502      	strb	r2, [r0, #20]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000f16:	0799      	lsls	r1, r3, #30
 8000f18:	d05c      	beq.n	8000fd4 <HAL_TIM_IRQHandler+0xdc>
          HAL_TIM_IC_CaptureCallback(htim);
 8000f1a:	f7ff ffea 	bl	8000ef2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000f22:	6823      	ldr	r3, [r4, #0]
 8000f24:	691a      	ldr	r2, [r3, #16]
 8000f26:	0752      	lsls	r2, r2, #29
 8000f28:	d510      	bpl.n	8000f4c <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	0750      	lsls	r0, r2, #29
 8000f2e:	d50d      	bpl.n	8000f4c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000f30:	f06f 0204 	mvn.w	r2, #4
 8000f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f36:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000f38:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f3a:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000f3c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000f40:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000f42:	d04d      	beq.n	8000fe0 <HAL_TIM_IRQHandler+0xe8>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f44:	f7ff ffd5 	bl	8000ef2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	0711      	lsls	r1, r2, #28
 8000f52:	d50f      	bpl.n	8000f74 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	0712      	lsls	r2, r2, #28
 8000f58:	d50c      	bpl.n	8000f74 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000f5a:	f06f 0208 	mvn.w	r2, #8
 8000f5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f60:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000f62:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f64:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000f66:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8000f68:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000f6a:	d03f      	beq.n	8000fec <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f6c:	f7ff ffc1 	bl	8000ef2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f70:	2300      	movs	r3, #0
 8000f72:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	06d0      	lsls	r0, r2, #27
 8000f7a:	d510      	bpl.n	8000f9e <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	06d1      	lsls	r1, r2, #27
 8000f80:	d50d      	bpl.n	8000f9e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000f82:	f06f 0210 	mvn.w	r2, #16
 8000f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f88:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000f8a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f8c:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000f8e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000f92:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000f94:	d030      	beq.n	8000ff8 <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f96:	f7ff ffac 	bl	8000ef2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	691a      	ldr	r2, [r3, #16]
 8000fa2:	07d2      	lsls	r2, r2, #31
 8000fa4:	d508      	bpl.n	8000fb8 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	07d0      	lsls	r0, r2, #31
 8000faa:	d505      	bpl.n	8000fb8 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000fac:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000fb0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000fb2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000fb4:	f001 f8ac 	bl	8002110 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000fb8:	6823      	ldr	r3, [r4, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	0651      	lsls	r1, r2, #25
 8000fbe:	d508      	bpl.n	8000fd2 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	0652      	lsls	r2, r2, #25
 8000fc4:	d505      	bpl.n	8000fd2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000fc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000fca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000fcc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000fce:	f7ff ff92 	bl	8000ef6 <HAL_TIM_TriggerCallback>
 8000fd2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fd4:	f7ff ff8c 	bl	8000ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f7ff ff8b 	bl	8000ef4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fde:	e79e      	b.n	8000f1e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fe0:	f7ff ff86 	bl	8000ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f7ff ff85 	bl	8000ef4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fea:	e7ad      	b.n	8000f48 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fec:	f7ff ff80 	bl	8000ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f7ff ff7f 	bl	8000ef4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ff6:	e7bb      	b.n	8000f70 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ff8:	f7ff ff7a 	bl	8000ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f7ff ff79 	bl	8000ef4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001002:	e7ca      	b.n	8000f9a <HAL_TIM_IRQHandler+0xa2>

08001004 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001008:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800100a:	6805      	ldr	r5, [r0, #0]
 800100c:	68c2      	ldr	r2, [r0, #12]
 800100e:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001010:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001012:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001016:	4313      	orrs	r3, r2
 8001018:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800101a:	6883      	ldr	r3, [r0, #8]
 800101c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 800101e:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001020:	4303      	orrs	r3, r0
 8001022:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001026:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800102a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 800102c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001030:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001032:	4313      	orrs	r3, r2
 8001034:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001036:	696b      	ldr	r3, [r5, #20]
 8001038:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800103c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001040:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001042:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001046:	616b      	str	r3, [r5, #20]
 8001048:	4b7e      	ldr	r3, [pc, #504]	; (8001244 <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800104a:	d17f      	bne.n	800114c <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 800104c:	429d      	cmp	r5, r3
 800104e:	f04f 0419 	mov.w	r4, #25
 8001052:	d147      	bne.n	80010e4 <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001054:	f7ff feae 	bl	8000db4 <HAL_RCC_GetPCLK2Freq>
 8001058:	fb04 f300 	mul.w	r3, r4, r0
 800105c:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001060:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001064:	007f      	lsls	r7, r7, #1
 8001066:	fbb3 f3f7 	udiv	r3, r3, r7
 800106a:	fbb3 f3f8 	udiv	r3, r3, r8
 800106e:	011f      	lsls	r7, r3, #4
 8001070:	f7ff fea0 	bl	8000db4 <HAL_RCC_GetPCLK2Freq>
 8001074:	4360      	muls	r0, r4
 8001076:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fbb0 f6f3 	udiv	r6, r0, r3
 8001080:	f7ff fe98 	bl	8000db4 <HAL_RCC_GetPCLK2Freq>
 8001084:	4360      	muls	r0, r4
 8001086:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001090:	fbb3 f3f8 	udiv	r3, r3, r8
 8001094:	fb08 6313 	mls	r3, r8, r3, r6
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	3332      	adds	r3, #50	; 0x32
 800109c:	fbb3 f3f8 	udiv	r3, r3, r8
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 80010a6:	f7ff fe85 	bl	8000db4 <HAL_RCC_GetPCLK2Freq>
 80010aa:	4360      	muls	r0, r4
 80010ac:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80010b0:	0052      	lsls	r2, r2, #1
 80010b2:	fbb0 faf2 	udiv	sl, r0, r2
 80010b6:	f7ff fe7d 	bl	8000db4 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80010ba:	4360      	muls	r0, r4
 80010bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80010c6:	fbb3 f3f8 	udiv	r3, r3, r8
 80010ca:	fb08 a313 	mls	r3, r8, r3, sl
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	3332      	adds	r3, #50	; 0x32
 80010d2:	fbb3 f3f8 	udiv	r3, r3, r8
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80010dc:	4433      	add	r3, r6
 80010de:	60ab      	str	r3, [r5, #8]
 80010e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80010e4:	f7ff fe4e 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 80010e8:	fb04 f300 	mul.w	r3, r4, r0
 80010ec:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80010f0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80010f4:	007f      	lsls	r7, r7, #1
 80010f6:	fbb3 f3f7 	udiv	r3, r3, r7
 80010fa:	fbb3 f3f8 	udiv	r3, r3, r8
 80010fe:	011f      	lsls	r7, r3, #4
 8001100:	f7ff fe40 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8001104:	4360      	muls	r0, r4
 8001106:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fbb0 f6f3 	udiv	r6, r0, r3
 8001110:	f7ff fe38 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8001114:	4360      	muls	r0, r4
 8001116:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001120:	fbb3 f3f8 	udiv	r3, r3, r8
 8001124:	fb08 6313 	mls	r3, r8, r3, r6
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	3332      	adds	r3, #50	; 0x32
 800112c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001136:	f7ff fe25 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 800113a:	4360      	muls	r0, r4
 800113c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001140:	0052      	lsls	r2, r2, #1
 8001142:	fbb0 faf2 	udiv	sl, r0, r2
 8001146:	f7ff fe1d 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 800114a:	e7b6      	b.n	80010ba <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 800114c:	429d      	cmp	r5, r3
 800114e:	f04f 0419 	mov.w	r4, #25
 8001152:	d143      	bne.n	80011dc <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001154:	f7ff fe2e 	bl	8000db4 <HAL_RCC_GetPCLK2Freq>
 8001158:	fb04 f300 	mul.w	r3, r4, r0
 800115c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001160:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001164:	00b6      	lsls	r6, r6, #2
 8001166:	fbb3 f3f6 	udiv	r3, r3, r6
 800116a:	fbb3 f3f8 	udiv	r3, r3, r8
 800116e:	011e      	lsls	r6, r3, #4
 8001170:	f7ff fe20 	bl	8000db4 <HAL_RCC_GetPCLK2Freq>
 8001174:	4360      	muls	r0, r4
 8001176:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001180:	f7ff fe18 	bl	8000db4 <HAL_RCC_GetPCLK2Freq>
 8001184:	4360      	muls	r0, r4
 8001186:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001190:	fbb3 f3f8 	udiv	r3, r3, r8
 8001194:	fb08 7313 	mls	r3, r8, r3, r7
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	3332      	adds	r3, #50	; 0x32
 800119c:	fbb3 f3f8 	udiv	r3, r3, r8
 80011a0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80011a4:	f7ff fe06 	bl	8000db4 <HAL_RCC_GetPCLK2Freq>
 80011a8:	4360      	muls	r0, r4
 80011aa:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80011ae:	0092      	lsls	r2, r2, #2
 80011b0:	fbb0 faf2 	udiv	sl, r0, r2
 80011b4:	f7ff fdfe 	bl	8000db4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80011b8:	4360      	muls	r0, r4
 80011ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80011c4:	fbb3 f3f8 	udiv	r3, r3, r8
 80011c8:	fb08 a313 	mls	r3, r8, r3, sl
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	3332      	adds	r3, #50	; 0x32
 80011d0:	fbb3 f3f8 	udiv	r3, r3, r8
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	433b      	orrs	r3, r7
 80011da:	e77f      	b.n	80010dc <UART_SetConfig+0xd8>
 80011dc:	f7ff fdd2 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 80011e0:	fb04 f300 	mul.w	r3, r4, r0
 80011e4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80011e8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80011ec:	00b6      	lsls	r6, r6, #2
 80011ee:	fbb3 f3f6 	udiv	r3, r3, r6
 80011f2:	fbb3 f3f8 	udiv	r3, r3, r8
 80011f6:	011e      	lsls	r6, r3, #4
 80011f8:	f7ff fdc4 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 80011fc:	4360      	muls	r0, r4
 80011fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	fbb0 f7f3 	udiv	r7, r0, r3
 8001208:	f7ff fdbc 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 800120c:	4360      	muls	r0, r4
 800120e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fbb0 f3f3 	udiv	r3, r0, r3
 8001218:	fbb3 f3f8 	udiv	r3, r3, r8
 800121c:	fb08 7313 	mls	r3, r8, r3, r7
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	3332      	adds	r3, #50	; 0x32
 8001224:	fbb3 f3f8 	udiv	r3, r3, r8
 8001228:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800122c:	f7ff fdaa 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8001230:	4360      	muls	r0, r4
 8001232:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	fbb0 faf2 	udiv	sl, r0, r2
 800123c:	f7ff fda2 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
 8001240:	e7ba      	b.n	80011b8 <UART_SetConfig+0x1b4>
 8001242:	bf00      	nop
 8001244:	40013800 	.word	0x40013800

08001248 <HAL_UART_Init>:
{
 8001248:	b510      	push	{r4, lr}
  if(huart == NULL)
 800124a:	4604      	mov	r4, r0
 800124c:	b330      	cbz	r0, 800129c <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 800124e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001252:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001256:	b91b      	cbnz	r3, 8001260 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001258:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800125c:	f000 ff88 	bl	8002170 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8001260:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8001262:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8001264:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001268:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800126a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800126c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001270:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001272:	f7ff fec7 	bl	8001004 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001276:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001278:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001280:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001282:	695a      	ldr	r2, [r3, #20]
 8001284:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001288:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001290:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 8001292:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001294:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8001296:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800129a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800129c:	2001      	movs	r0, #1
}
 800129e:	bd10      	pop	{r4, pc}

080012a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80012a0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80012a2:	f000 fbf7 	bl	8001a94 <vTaskStartScheduler>
  
  return osOK;
}
 80012a6:	2000      	movs	r0, #0
 80012a8:	bd08      	pop	{r3, pc}

080012aa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80012aa:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80012ac:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 80012b0:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80012b2:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80012b4:	bf08      	it	eq
 80012b6:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80012b8:	8a02      	ldrh	r2, [r0, #16]
    fpriority += (priority - osPriorityIdle);
 80012ba:	bf18      	it	ne
 80012bc:	3403      	addne	r4, #3
{
 80012be:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80012c0:	e890 0022 	ldmia.w	r0, {r1, r5}
 80012c4:	a803      	add	r0, sp, #12
 80012c6:	9001      	str	r0, [sp, #4]
 80012c8:	9400      	str	r4, [sp, #0]
 80012ca:	4628      	mov	r0, r5
 80012cc:	f000 fb12 	bl	80018f4 <xTaskCreate>
 80012d0:	2801      	cmp	r0, #1
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 80012d2:	bf14      	ite	ne
 80012d4:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
 80012d6:	9803      	ldreq	r0, [sp, #12]
}
 80012d8:	b005      	add	sp, #20
 80012da:	bd30      	pop	{r4, r5, pc}

080012dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80012dc:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80012de:	2800      	cmp	r0, #0
 80012e0:	bf08      	it	eq
 80012e2:	2001      	moveq	r0, #1
 80012e4:	f000 fd24 	bl	8001d30 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80012e8:	2000      	movs	r0, #0
 80012ea:	bd08      	pop	{r3, pc}

080012ec <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80012ec:	2200      	movs	r2, #0
 80012ee:	c803      	ldmia	r0, {r0, r1}
 80012f0:	f000 ba86 	b.w	8001800 <xQueueGenericCreate>

080012f4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012f4:	f100 0308 	add.w	r3, r0, #8
 80012f8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80012fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012fe:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001300:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001302:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001304:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001306:	6003      	str	r3, [r0, #0]
 8001308:	4770      	bx	lr

0800130a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800130a:	2300      	movs	r3, #0
 800130c:	6103      	str	r3, [r0, #16]
 800130e:	4770      	bx	lr

08001310 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001310:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001312:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001314:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001316:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800131c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800131e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001320:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001322:	3301      	adds	r3, #1
 8001324:	6003      	str	r3, [r0, #0]
 8001326:	4770      	bx	lr

08001328 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001328:	680a      	ldr	r2, [r1, #0]
{
 800132a:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800132c:	1c53      	adds	r3, r2, #1
 800132e:	d10a      	bne.n	8001346 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001330:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001336:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001338:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800133a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800133c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800133e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001340:	3301      	adds	r3, #1
 8001342:	6003      	str	r3, [r0, #0]
 8001344:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001346:	f100 0308 	add.w	r3, r0, #8
 800134a:	685c      	ldr	r4, [r3, #4]
 800134c:	6825      	ldr	r5, [r4, #0]
 800134e:	42aa      	cmp	r2, r5
 8001350:	d3ef      	bcc.n	8001332 <vListInsert+0xa>
 8001352:	4623      	mov	r3, r4
 8001354:	e7f9      	b.n	800134a <vListInsert+0x22>

08001356 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001356:	6841      	ldr	r1, [r0, #4]
 8001358:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800135a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800135c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800135e:	6882      	ldr	r2, [r0, #8]
 8001360:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001362:	6859      	ldr	r1, [r3, #4]
 8001364:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001366:	bf08      	it	eq
 8001368:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800136a:	2200      	movs	r2, #0
 800136c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	3801      	subs	r0, #1
 8001372:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001374:	4770      	bx	lr
	...

08001378 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <prvTaskExitError+0x2c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	d008      	beq.n	8001392 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001384:	f383 8811 	msr	BASEPRI, r3
 8001388:	f3bf 8f6f 	isb	sy
 800138c:	f3bf 8f4f 	dsb	sy
 8001390:	e7fe      	b.n	8001390 <prvTaskExitError+0x18>
 8001392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001396:	f383 8811 	msr	BASEPRI, r3
 800139a:	f3bf 8f6f 	isb	sy
 800139e:	f3bf 8f4f 	dsb	sy
 80013a2:	e7fe      	b.n	80013a2 <prvTaskExitError+0x2a>
 80013a4:	20000000 	.word	0x20000000

080013a8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80013a8:	4806      	ldr	r0, [pc, #24]	; (80013c4 <prvPortStartFirstTask+0x1c>)
 80013aa:	6800      	ldr	r0, [r0, #0]
 80013ac:	6800      	ldr	r0, [r0, #0]
 80013ae:	f380 8808 	msr	MSP, r0
 80013b2:	b662      	cpsie	i
 80013b4:	b661      	cpsie	f
 80013b6:	f3bf 8f4f 	dsb	sy
 80013ba:	f3bf 8f6f 	isb	sy
 80013be:	df00      	svc	0
 80013c0:	bf00      	nop
 80013c2:	0000      	.short	0x0000
 80013c4:	e000ed08 	.word	0xe000ed08

080013c8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80013c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013cc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80013d2:	f021 0101 	bic.w	r1, r1, #1
 80013d6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80013da:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80013de:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80013e2:	3840      	subs	r0, #64	; 0x40
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	08001379 	.word	0x08001379
 80013ec:	00000000 	.word	0x00000000

080013f0 <SVC_Handler>:
	__asm volatile (
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <pxCurrentTCBConst2>)
 80013f2:	6819      	ldr	r1, [r3, #0]
 80013f4:	6808      	ldr	r0, [r1, #0]
 80013f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80013fa:	f380 8809 	msr	PSP, r0
 80013fe:	f3bf 8f6f 	isb	sy
 8001402:	f04f 0000 	mov.w	r0, #0
 8001406:	f380 8811 	msr	BASEPRI, r0
 800140a:	f04e 0e0d 	orr.w	lr, lr, #13
 800140e:	4770      	bx	lr

08001410 <pxCurrentTCBConst2>:
 8001410:	20000c44 	.word	0x20000c44

08001414 <vPortEnterCritical>:
 8001414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001418:	f383 8811 	msr	BASEPRI, r3
 800141c:	f3bf 8f6f 	isb	sy
 8001420:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <vPortEnterCritical+0x3c>)
 8001426:	6813      	ldr	r3, [r2, #0]
 8001428:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800142a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800142c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800142e:	d10d      	bne.n	800144c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <vPortEnterCritical+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001438:	d008      	beq.n	800144c <vPortEnterCritical+0x38>
 800143a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800143e:	f383 8811 	msr	BASEPRI, r3
 8001442:	f3bf 8f6f 	isb	sy
 8001446:	f3bf 8f4f 	dsb	sy
 800144a:	e7fe      	b.n	800144a <vPortEnterCritical+0x36>
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000000 	.word	0x20000000
 8001454:	e000ed04 	.word	0xe000ed04

08001458 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001458:	4a08      	ldr	r2, [pc, #32]	; (800147c <vPortExitCritical+0x24>)
 800145a:	6813      	ldr	r3, [r2, #0]
 800145c:	b943      	cbnz	r3, 8001470 <vPortExitCritical+0x18>
 800145e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001462:	f383 8811 	msr	BASEPRI, r3
 8001466:	f3bf 8f6f 	isb	sy
 800146a:	f3bf 8f4f 	dsb	sy
 800146e:	e7fe      	b.n	800146e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001470:	3b01      	subs	r3, #1
 8001472:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001474:	b90b      	cbnz	r3, 800147a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001476:	f383 8811 	msr	BASEPRI, r3
 800147a:	4770      	bx	lr
 800147c:	20000000 	.word	0x20000000

08001480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001480:	f3ef 8009 	mrs	r0, PSP
 8001484:	f3bf 8f6f 	isb	sy
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <pxCurrentTCBConst>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001490:	6010      	str	r0, [r2, #0]
 8001492:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001496:	f04f 0050 	mov.w	r0, #80	; 0x50
 800149a:	f380 8811 	msr	BASEPRI, r0
 800149e:	f000 fca5 	bl	8001dec <vTaskSwitchContext>
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	f380 8811 	msr	BASEPRI, r0
 80014aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80014ae:	6819      	ldr	r1, [r3, #0]
 80014b0:	6808      	ldr	r0, [r1, #0]
 80014b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80014b6:	f380 8809 	msr	PSP, r0
 80014ba:	f3bf 8f6f 	isb	sy
 80014be:	4770      	bx	lr

080014c0 <pxCurrentTCBConst>:
 80014c0:	20000c44 	.word	0x20000c44

080014c4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80014c4:	b508      	push	{r3, lr}
	__asm volatile
 80014c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ca:	f383 8811 	msr	BASEPRI, r3
 80014ce:	f3bf 8f6f 	isb	sy
 80014d2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80014d6:	f000 fb21 	bl	8001b1c <xTaskIncrementTick>
 80014da:	b118      	cbz	r0, 80014e4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80014dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014e0:	4b02      	ldr	r3, [pc, #8]	; (80014ec <SysTick_Handler+0x28>)
 80014e2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80014e4:	2300      	movs	r3, #0
 80014e6:	f383 8811 	msr	BASEPRI, r3
 80014ea:	bd08      	pop	{r3, pc}
 80014ec:	e000ed04 	.word	0xe000ed04

080014f0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80014f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <vPortSetupTimerInterrupt+0x1c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80014fc:	4a04      	ldr	r2, [pc, #16]	; (8001510 <vPortSetupTimerInterrupt+0x20>)
 80014fe:	3b01      	subs	r3, #1
 8001500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001502:	2207      	movs	r2, #7
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <vPortSetupTimerInterrupt+0x24>)
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000004 	.word	0x20000004
 8001510:	e000e014 	.word	0xe000e014
 8001514:	e000e010 	.word	0xe000e010

08001518 <xPortStartScheduler>:
{
 8001518:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800151c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001524:	22ff      	movs	r2, #255	; 0xff
 8001526:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001528:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001532:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001536:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800153a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800153c:	2207      	movs	r2, #7
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <xPortStartScheduler+0x88>)
 8001540:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001542:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001546:	1e54      	subs	r4, r2, #1
 8001548:	0600      	lsls	r0, r0, #24
 800154a:	d41c      	bmi.n	8001586 <xPortStartScheduler+0x6e>
 800154c:	b101      	cbz	r1, 8001550 <xPortStartScheduler+0x38>
 800154e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001554:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001558:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800155a:	9b01      	ldr	r3, [sp, #4]
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <xPortStartScheduler+0x80>)
 800155e:	b2db      	uxtb	r3, r3
 8001560:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <xPortStartScheduler+0x8c>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800156a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001572:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001574:	f7ff ffbc 	bl	80014f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001578:	2200      	movs	r2, #0
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <xPortStartScheduler+0x90>)
 800157c:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 800157e:	f7ff ff13 	bl	80013a8 <prvPortStartFirstTask>
	prvTaskExitError();
 8001582:	f7ff fef9 	bl	8001378 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001586:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800158a:	2101      	movs	r1, #1
 800158c:	0052      	lsls	r2, r2, #1
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	f88d 2003 	strb.w	r2, [sp, #3]
 8001594:	4622      	mov	r2, r4
 8001596:	e7d4      	b.n	8001542 <xPortStartScheduler+0x2a>
 8001598:	e000e400 	.word	0xe000e400
 800159c:	20000024 	.word	0x20000024
 80015a0:	20000028 	.word	0x20000028
 80015a4:	e000ed20 	.word	0xe000ed20
 80015a8:	20000000 	.word	0x20000000

080015ac <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80015ac:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <prvInsertBlockIntoFreeList+0x40>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4282      	cmp	r2, r0
 80015b4:	d318      	bcc.n	80015e8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80015b6:	685c      	ldr	r4, [r3, #4]
 80015b8:	1919      	adds	r1, r3, r4
 80015ba:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80015bc:	bf01      	itttt	eq
 80015be:	6841      	ldreq	r1, [r0, #4]
 80015c0:	4618      	moveq	r0, r3
 80015c2:	1909      	addeq	r1, r1, r4
 80015c4:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80015c6:	6844      	ldr	r4, [r0, #4]
 80015c8:	1901      	adds	r1, r0, r4
 80015ca:	428a      	cmp	r2, r1
 80015cc:	d107      	bne.n	80015de <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <prvInsertBlockIntoFreeList+0x44>)
 80015d0:	6809      	ldr	r1, [r1, #0]
 80015d2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80015d4:	bf1f      	itttt	ne
 80015d6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80015d8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80015da:	1909      	addne	r1, r1, r4
 80015dc:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80015de:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80015e0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80015e2:	bf18      	it	ne
 80015e4:	6018      	strne	r0, [r3, #0]
 80015e6:	bd10      	pop	{r4, pc}
 80015e8:	4613      	mov	r3, r2
 80015ea:	e7e1      	b.n	80015b0 <prvInsertBlockIntoFreeList+0x4>
 80015ec:	20000c3c 	.word	0x20000c3c
 80015f0:	2000002c 	.word	0x2000002c

080015f4 <pvPortMalloc>:
{
 80015f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015f8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80015fa:	f000 fa87 	bl	8001b0c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80015fe:	493e      	ldr	r1, [pc, #248]	; (80016f8 <pvPortMalloc+0x104>)
 8001600:	4d3e      	ldr	r5, [pc, #248]	; (80016fc <pvPortMalloc+0x108>)
 8001602:	680b      	ldr	r3, [r1, #0]
 8001604:	bb0b      	cbnz	r3, 800164a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001606:	4a3e      	ldr	r2, [pc, #248]	; (8001700 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001608:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800160a:	bf1d      	ittte	ne
 800160c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800160e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001612:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001616:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800161a:	bf1c      	itt	ne
 800161c:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800161e:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8001620:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001622:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001624:	4e37      	ldr	r6, [pc, #220]	; (8001704 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8001626:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001628:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800162c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800162e:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001630:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001632:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8001634:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001636:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001638:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800163a:	4b33      	ldr	r3, [pc, #204]	; (8001708 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800163c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800163e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001640:	4b32      	ldr	r3, [pc, #200]	; (800170c <pvPortMalloc+0x118>)
 8001642:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001644:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001648:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800164a:	682f      	ldr	r7, [r5, #0]
 800164c:	4227      	tst	r7, r4
 800164e:	d116      	bne.n	800167e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001650:	2c00      	cmp	r4, #0
 8001652:	d040      	beq.n	80016d6 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8001654:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001658:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800165a:	bf1c      	itt	ne
 800165c:	f023 0307 	bicne.w	r3, r3, #7
 8001660:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001662:	b163      	cbz	r3, 800167e <pvPortMalloc+0x8a>
 8001664:	4a29      	ldr	r2, [pc, #164]	; (800170c <pvPortMalloc+0x118>)
 8001666:	6816      	ldr	r6, [r2, #0]
 8001668:	4690      	mov	r8, r2
 800166a:	42b3      	cmp	r3, r6
 800166c:	d807      	bhi.n	800167e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800166e:	4a25      	ldr	r2, [pc, #148]	; (8001704 <pvPortMalloc+0x110>)
 8001670:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001672:	6868      	ldr	r0, [r5, #4]
 8001674:	4283      	cmp	r3, r0
 8001676:	d804      	bhi.n	8001682 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001678:	6809      	ldr	r1, [r1, #0]
 800167a:	428d      	cmp	r5, r1
 800167c:	d107      	bne.n	800168e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800167e:	2400      	movs	r4, #0
 8001680:	e029      	b.n	80016d6 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001682:	682c      	ldr	r4, [r5, #0]
 8001684:	2c00      	cmp	r4, #0
 8001686:	d0f7      	beq.n	8001678 <pvPortMalloc+0x84>
 8001688:	462a      	mov	r2, r5
 800168a:	4625      	mov	r5, r4
 800168c:	e7f1      	b.n	8001672 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800168e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001690:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001692:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001694:	1ac2      	subs	r2, r0, r3
 8001696:	2a10      	cmp	r2, #16
 8001698:	d90f      	bls.n	80016ba <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800169a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800169c:	0741      	lsls	r1, r0, #29
 800169e:	d008      	beq.n	80016b2 <pvPortMalloc+0xbe>
	__asm volatile
 80016a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016a4:	f383 8811 	msr	BASEPRI, r3
 80016a8:	f3bf 8f6f 	isb	sy
 80016ac:	f3bf 8f4f 	dsb	sy
 80016b0:	e7fe      	b.n	80016b0 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80016b2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80016b4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80016b6:	f7ff ff79 	bl	80015ac <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80016ba:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80016bc:	4912      	ldr	r1, [pc, #72]	; (8001708 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80016be:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80016c0:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80016c2:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80016c4:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80016c6:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80016ca:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80016cc:	bf38      	it	cc
 80016ce:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80016d0:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80016d2:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80016d4:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80016d6:	f000 fab3 	bl	8001c40 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80016da:	0763      	lsls	r3, r4, #29
 80016dc:	d008      	beq.n	80016f0 <pvPortMalloc+0xfc>
 80016de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016e2:	f383 8811 	msr	BASEPRI, r3
 80016e6:	f3bf 8f6f 	isb	sy
 80016ea:	f3bf 8f4f 	dsb	sy
 80016ee:	e7fe      	b.n	80016ee <pvPortMalloc+0xfa>
}
 80016f0:	4620      	mov	r0, r4
 80016f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016f6:	bf00      	nop
 80016f8:	2000002c 	.word	0x2000002c
 80016fc:	20000c30 	.word	0x20000c30
 8001700:	20000030 	.word	0x20000030
 8001704:	20000c3c 	.word	0x20000c3c
 8001708:	20000c38 	.word	0x20000c38
 800170c:	20000c34 	.word	0x20000c34

08001710 <vPortFree>:
{
 8001710:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001712:	4604      	mov	r4, r0
 8001714:	b370      	cbz	r0, 8001774 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001716:	4a18      	ldr	r2, [pc, #96]	; (8001778 <vPortFree+0x68>)
 8001718:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	4213      	tst	r3, r2
 8001720:	d108      	bne.n	8001734 <vPortFree+0x24>
 8001722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001726:	f383 8811 	msr	BASEPRI, r3
 800172a:	f3bf 8f6f 	isb	sy
 800172e:	f3bf 8f4f 	dsb	sy
 8001732:	e7fe      	b.n	8001732 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001734:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001738:	b141      	cbz	r1, 800174c <vPortFree+0x3c>
 800173a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800173e:	f383 8811 	msr	BASEPRI, r3
 8001742:	f3bf 8f6f 	isb	sy
 8001746:	f3bf 8f4f 	dsb	sy
 800174a:	e7fe      	b.n	800174a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800174c:	ea23 0302 	bic.w	r3, r3, r2
 8001750:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001754:	f000 f9da 	bl	8001b0c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001758:	4a08      	ldr	r2, [pc, #32]	; (800177c <vPortFree+0x6c>)
 800175a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800175e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001760:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001764:	440b      	add	r3, r1
 8001766:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001768:	f7ff ff20 	bl	80015ac <prvInsertBlockIntoFreeList>
}
 800176c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001770:	f000 ba66 	b.w	8001c40 <xTaskResumeAll>
 8001774:	bd10      	pop	{r4, pc}
 8001776:	bf00      	nop
 8001778:	20000c30 	.word	0x20000c30
 800177c:	20000c34 	.word	0x20000c34

08001780 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001780:	b538      	push	{r3, r4, r5, lr}
 8001782:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8001784:	4604      	mov	r4, r0
 8001786:	b940      	cbnz	r0, 800179a <xQueueGenericReset+0x1a>
 8001788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800178c:	f383 8811 	msr	BASEPRI, r3
 8001790:	f3bf 8f6f 	isb	sy
 8001794:	f3bf 8f4f 	dsb	sy
 8001798:	e7fe      	b.n	8001798 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800179a:	f7ff fe3b 	bl	8001414 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800179e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80017a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017a2:	6822      	ldr	r2, [r4, #0]
 80017a4:	4343      	muls	r3, r0
 80017a6:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80017a8:	1a1b      	subs	r3, r3, r0
 80017aa:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80017ac:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80017ae:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80017b0:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80017b2:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80017b4:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80017b6:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 80017b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80017bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80017c0:	b995      	cbnz	r5, 80017e8 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017c2:	6923      	ldr	r3, [r4, #16]
 80017c4:	b163      	cbz	r3, 80017e0 <xQueueGenericReset+0x60>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017c6:	f104 0010 	add.w	r0, r4, #16
 80017ca:	f000 fb49 	bl	8001e60 <xTaskRemoveFromEventList>
 80017ce:	b138      	cbz	r0, 80017e0 <xQueueGenericReset+0x60>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80017d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <xQueueGenericReset+0x7c>)
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	f3bf 8f4f 	dsb	sy
 80017dc:	f3bf 8f6f 	isb	sy
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 80017e0:	f7ff fe3a 	bl	8001458 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 80017e4:	2001      	movs	r0, #1
 80017e6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80017e8:	f104 0010 	add.w	r0, r4, #16
 80017ec:	f7ff fd82 	bl	80012f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80017f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80017f4:	f7ff fd7e 	bl	80012f4 <vListInitialise>
 80017f8:	e7f2      	b.n	80017e0 <xQueueGenericReset+0x60>
 80017fa:	bf00      	nop
 80017fc:	e000ed04 	.word	0xe000ed04

08001800 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001800:	b570      	push	{r4, r5, r6, lr}
 8001802:	460d      	mov	r5, r1
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001804:	4606      	mov	r6, r0
 8001806:	b940      	cbnz	r0, 800181a <xQueueGenericCreate+0x1a>
 8001808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180c:	f383 8811 	msr	BASEPRI, r3
 8001810:	f3bf 8f6f 	isb	sy
 8001814:	f3bf 8f4f 	dsb	sy
 8001818:	e7fe      	b.n	8001818 <xQueueGenericCreate+0x18>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800181a:	4348      	muls	r0, r1
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800181c:	3048      	adds	r0, #72	; 0x48
 800181e:	f7ff fee9 	bl	80015f4 <pvPortMalloc>

		if( pxNewQueue != NULL )
 8001822:	4604      	mov	r4, r0
 8001824:	b138      	cbz	r0, 8001836 <xQueueGenericCreate+0x36>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001826:	b945      	cbnz	r5, 800183a <xQueueGenericCreate+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001828:	6020      	str	r0, [r4, #0]
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800182a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800182c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800182e:	2101      	movs	r1, #1
 8001830:	4620      	mov	r0, r4
 8001832:	f7ff ffa5 	bl	8001780 <xQueueGenericReset>
	}
 8001836:	4620      	mov	r0, r4
 8001838:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800183a:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800183e:	6003      	str	r3, [r0, #0]
 8001840:	e7f3      	b.n	800182a <xQueueGenericCreate+0x2a>
	...

08001844 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <prvResetNextTaskUnblockTime+0x1c>)
 8001846:	6813      	ldr	r3, [r2, #0]
 8001848:	6819      	ldr	r1, [r3, #0]
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <prvResetNextTaskUnblockTime+0x20>)
 800184c:	b919      	cbnz	r1, 8001856 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800184e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800185a:	68d2      	ldr	r2, [r2, #12]
 800185c:	6852      	ldr	r2, [r2, #4]
 800185e:	e7f8      	b.n	8001852 <prvResetNextTaskUnblockTime+0xe>
 8001860:	20000c48 	.word	0x20000c48
 8001864:	20000d20 	.word	0x20000d20

08001868 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800186c:	4e1b      	ldr	r6, [pc, #108]	; (80018dc <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800186e:	681d      	ldr	r5, [r3, #0]
{
 8001870:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001872:	6830      	ldr	r0, [r6, #0]
{
 8001874:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001876:	3004      	adds	r0, #4
 8001878:	f7ff fd6d 	bl	8001356 <uxListRemove>
 800187c:	4633      	mov	r3, r6
 800187e:	b940      	cbnz	r0, 8001892 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001880:	2001      	movs	r0, #1
 8001882:	6831      	ldr	r1, [r6, #0]
 8001884:	4e16      	ldr	r6, [pc, #88]	; (80018e0 <prvAddCurrentTaskToDelayedList+0x78>)
 8001886:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001888:	6832      	ldr	r2, [r6, #0]
 800188a:	4088      	lsls	r0, r1
 800188c:	ea22 0200 	bic.w	r2, r2, r0
 8001890:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001892:	1c62      	adds	r2, r4, #1
 8001894:	d107      	bne.n	80018a6 <prvAddCurrentTaskToDelayedList+0x3e>
 8001896:	b137      	cbz	r7, 80018a6 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001898:	6819      	ldr	r1, [r3, #0]
 800189a:	4812      	ldr	r0, [pc, #72]	; (80018e4 <prvAddCurrentTaskToDelayedList+0x7c>)
 800189c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800189e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018a2:	f7ff bd35 	b.w	8001310 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80018a6:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80018a8:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80018aa:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80018ac:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80018ae:	d907      	bls.n	80018c0 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <prvAddCurrentTaskToDelayedList+0x80>)
 80018b2:	6810      	ldr	r0, [r2, #0]
 80018b4:	6819      	ldr	r1, [r3, #0]
}
 80018b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018ba:	3104      	adds	r1, #4
 80018bc:	f7ff bd34 	b.w	8001328 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018c0:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <prvAddCurrentTaskToDelayedList+0x84>)
 80018c2:	6810      	ldr	r0, [r2, #0]
 80018c4:	6819      	ldr	r1, [r3, #0]
 80018c6:	3104      	adds	r1, #4
 80018c8:	f7ff fd2e 	bl	8001328 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <prvAddCurrentTaskToDelayedList+0x88>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80018d2:	bf38      	it	cc
 80018d4:	601c      	strcc	r4, [r3, #0]
 80018d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018d8:	20000d68 	.word	0x20000d68
 80018dc:	20000c44 	.word	0x20000c44
 80018e0:	20000cf0 	.word	0x20000cf0
 80018e4:	20000d40 	.word	0x20000d40
 80018e8:	20000c4c 	.word	0x20000c4c
 80018ec:	20000c48 	.word	0x20000c48
 80018f0:	20000d20 	.word	0x20000d20

080018f4 <xTaskCreate>:
	{
 80018f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018f8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80018fc:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018fe:	4650      	mov	r0, sl
	{
 8001900:	460f      	mov	r7, r1
 8001902:	4699      	mov	r9, r3
 8001904:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001906:	f7ff fe75 	bl	80015f4 <pvPortMalloc>
			if( pxStack != NULL )
 800190a:	4605      	mov	r5, r0
 800190c:	2800      	cmp	r0, #0
 800190e:	f000 8096 	beq.w	8001a3e <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001912:	2054      	movs	r0, #84	; 0x54
 8001914:	f7ff fe6e 	bl	80015f4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001918:	4604      	mov	r4, r0
 800191a:	2800      	cmp	r0, #0
 800191c:	f000 808c 	beq.w	8001a38 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001920:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001924:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001926:	4455      	add	r5, sl
 8001928:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800192a:	f025 0a07 	bic.w	sl, r5, #7
 800192e:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001932:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001934:	7859      	ldrb	r1, [r3, #1]
 8001936:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800193a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800193e:	b109      	cbz	r1, 8001944 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001940:	42bb      	cmp	r3, r7
 8001942:	d1f7      	bne.n	8001934 <xTaskCreate+0x40>
 8001944:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001946:	f04f 0b00 	mov.w	fp, #0
 800194a:	2d06      	cmp	r5, #6
 800194c:	bf28      	it	cs
 800194e:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001950:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001952:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001954:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001956:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001958:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800195c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001960:	f7ff fcd3 	bl	800130a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001964:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001968:	f104 0018 	add.w	r0, r4, #24
 800196c:	f7ff fccd 	bl	800130a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001970:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001974:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001976:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001978:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800197a:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800197e:	464a      	mov	r2, r9
 8001980:	4641      	mov	r1, r8
 8001982:	4650      	mov	r0, sl
 8001984:	f7ff fd20 	bl	80013c8 <pxPortInitialiseStack>
 8001988:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800198a:	b106      	cbz	r6, 800198e <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800198c:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800198e:	f7ff fd41 	bl	8001414 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001992:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001994:	4e32      	ldr	r6, [pc, #200]	; (8001a60 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001a8c <xTaskCreate+0x198>
 800199c:	3201      	adds	r2, #1
 800199e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80019a0:	6835      	ldr	r5, [r6, #0]
 80019a2:	2d00      	cmp	r5, #0
 80019a4:	d14e      	bne.n	8001a44 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80019a6:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d11d      	bne.n	80019ea <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019ae:	eb08 0005 	add.w	r0, r8, r5
 80019b2:	3514      	adds	r5, #20
 80019b4:	f7ff fc9e 	bl	80012f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019b8:	2d8c      	cmp	r5, #140	; 0x8c
 80019ba:	d1f8      	bne.n	80019ae <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80019bc:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001a90 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80019c0:	4d28      	ldr	r5, [pc, #160]	; (8001a64 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80019c2:	4648      	mov	r0, r9
 80019c4:	f7ff fc96 	bl	80012f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80019c8:	4628      	mov	r0, r5
 80019ca:	f7ff fc93 	bl	80012f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80019ce:	4826      	ldr	r0, [pc, #152]	; (8001a68 <xTaskCreate+0x174>)
 80019d0:	f7ff fc90 	bl	80012f4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80019d4:	4825      	ldr	r0, [pc, #148]	; (8001a6c <xTaskCreate+0x178>)
 80019d6:	f7ff fc8d 	bl	80012f4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80019da:	4825      	ldr	r0, [pc, #148]	; (8001a70 <xTaskCreate+0x17c>)
 80019dc:	f7ff fc8a 	bl	80012f4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <xTaskCreate+0x180>)
 80019e2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <xTaskCreate+0x184>)
 80019e8:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80019ea:	2501      	movs	r5, #1
		uxTaskNumber++;
 80019ec:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80019ee:	4924      	ldr	r1, [pc, #144]	; (8001a80 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80019f0:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80019f2:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80019f4:	3301      	adds	r3, #1
 80019f6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80019f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019fa:	fa05 f302 	lsl.w	r3, r5, r2
 80019fe:	4303      	orrs	r3, r0
 8001a00:	2014      	movs	r0, #20
 8001a02:	600b      	str	r3, [r1, #0]
 8001a04:	fb00 8002 	mla	r0, r0, r2, r8
 8001a08:	4639      	mov	r1, r7
 8001a0a:	f7ff fc81 	bl	8001310 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001a0e:	f7ff fd23 	bl	8001458 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <xTaskCreate+0x190>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b163      	cbz	r3, 8001a32 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001a18:	6833      	ldr	r3, [r6, #0]
 8001a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d207      	bcs.n	8001a32 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <xTaskCreate+0x194>)
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	f3bf 8f4f 	dsb	sy
 8001a2e:	f3bf 8f6f 	isb	sy
	}
 8001a32:	4628      	mov	r0, r5
 8001a34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001a38:	4628      	mov	r0, r5
 8001a3a:	f7ff fe69 	bl	8001710 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a3e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001a42:	e7f6      	b.n	8001a32 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <xTaskCreate+0x190>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ce      	bne.n	80019ea <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001a4c:	6833      	ldr	r3, [r6, #0]
 8001a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a52:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001a54:	bf98      	it	ls
 8001a56:	6034      	strls	r4, [r6, #0]
 8001a58:	e7c7      	b.n	80019ea <xTaskCreate+0xf6>
 8001a5a:	bf00      	nop
 8001a5c:	20000cdc 	.word	0x20000cdc
 8001a60:	20000c44 	.word	0x20000c44
 8001a64:	20000d08 	.word	0x20000d08
 8001a68:	20000d28 	.word	0x20000d28
 8001a6c:	20000d54 	.word	0x20000d54
 8001a70:	20000d40 	.word	0x20000d40
 8001a74:	20000c48 	.word	0x20000c48
 8001a78:	20000c4c 	.word	0x20000c4c
 8001a7c:	20000cec 	.word	0x20000cec
 8001a80:	20000cf0 	.word	0x20000cf0
 8001a84:	20000d3c 	.word	0x20000d3c
 8001a88:	e000ed04 	.word	0xe000ed04
 8001a8c:	20000c50 	.word	0x20000c50
 8001a90:	20000cf4 	.word	0x20000cf4

08001a94 <vTaskStartScheduler>:
{
 8001a94:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001a96:	2400      	movs	r4, #0
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <vTaskStartScheduler+0x60>)
 8001a9a:	9400      	str	r4, [sp, #0]
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	4623      	mov	r3, r4
 8001aa2:	4915      	ldr	r1, [pc, #84]	; (8001af8 <vTaskStartScheduler+0x64>)
 8001aa4:	4815      	ldr	r0, [pc, #84]	; (8001afc <vTaskStartScheduler+0x68>)
 8001aa6:	f7ff ff25 	bl	80018f4 <xTaskCreate>
	if( xReturn == pdPASS )
 8001aaa:	2801      	cmp	r0, #1
 8001aac:	d114      	bne.n	8001ad8 <vTaskStartScheduler+0x44>
 8001aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab2:	f383 8811 	msr	BASEPRI, r3
 8001ab6:	f3bf 8f6f 	isb	sy
 8001aba:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <vTaskStartScheduler+0x6c>)
 8001ac4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <vTaskStartScheduler+0x70>)
 8001ac8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <vTaskStartScheduler+0x74>)
 8001acc:	601c      	str	r4, [r3, #0]
}
 8001ace:	b002      	add	sp, #8
 8001ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001ad4:	f7ff bd20 	b.w	8001518 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ad8:	3001      	adds	r0, #1
 8001ada:	d108      	bne.n	8001aee <vTaskStartScheduler+0x5a>
 8001adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae0:	f383 8811 	msr	BASEPRI, r3
 8001ae4:	f3bf 8f6f 	isb	sy
 8001ae8:	f3bf 8f4f 	dsb	sy
 8001aec:	e7fe      	b.n	8001aec <vTaskStartScheduler+0x58>
}
 8001aee:	b002      	add	sp, #8
 8001af0:	bd10      	pop	{r4, pc}
 8001af2:	bf00      	nop
 8001af4:	20000d1c 	.word	0x20000d1c
 8001af8:	080023ac 	.word	0x080023ac
 8001afc:	08001d79 	.word	0x08001d79
 8001b00:	20000d20 	.word	0x20000d20
 8001b04:	20000d3c 	.word	0x20000d3c
 8001b08:	20000d68 	.word	0x20000d68

08001b0c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001b0c:	4a02      	ldr	r2, [pc, #8]	; (8001b18 <vTaskSuspendAll+0xc>)
 8001b0e:	6813      	ldr	r3, [r2, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000ce8 	.word	0x20000ce8

08001b1c <xTaskIncrementTick>:
{
 8001b1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b20:	4b3c      	ldr	r3, [pc, #240]	; (8001c14 <xTaskIncrementTick+0xf8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d153      	bne.n	8001bd0 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001b28:	4b3b      	ldr	r3, [pc, #236]	; (8001c18 <xTaskIncrementTick+0xfc>)
 8001b2a:	681c      	ldr	r4, [r3, #0]
 8001b2c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001b2e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001b30:	b9bc      	cbnz	r4, 8001b62 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001b32:	4b3a      	ldr	r3, [pc, #232]	; (8001c1c <xTaskIncrementTick+0x100>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	b142      	cbz	r2, 8001b4c <xTaskIncrementTick+0x30>
 8001b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b3e:	f383 8811 	msr	BASEPRI, r3
 8001b42:	f3bf 8f6f 	isb	sy
 8001b46:	f3bf 8f4f 	dsb	sy
 8001b4a:	e7fe      	b.n	8001b4a <xTaskIncrementTick+0x2e>
 8001b4c:	4a34      	ldr	r2, [pc, #208]	; (8001c20 <xTaskIncrementTick+0x104>)
 8001b4e:	6819      	ldr	r1, [r3, #0]
 8001b50:	6810      	ldr	r0, [r2, #0]
 8001b52:	6018      	str	r0, [r3, #0]
 8001b54:	6011      	str	r1, [r2, #0]
 8001b56:	4a33      	ldr	r2, [pc, #204]	; (8001c24 <xTaskIncrementTick+0x108>)
 8001b58:	6813      	ldr	r3, [r2, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	f7ff fe71 	bl	8001844 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b62:	4d31      	ldr	r5, [pc, #196]	; (8001c28 <xTaskIncrementTick+0x10c>)
 8001b64:	f04f 0b00 	mov.w	fp, #0
 8001b68:	682b      	ldr	r3, [r5, #0]
 8001b6a:	4f30      	ldr	r7, [pc, #192]	; (8001c2c <xTaskIncrementTick+0x110>)
 8001b6c:	429c      	cmp	r4, r3
 8001b6e:	d33e      	bcc.n	8001bee <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b70:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001c1c <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001b74:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001c3c <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b78:	f8d8 2000 	ldr.w	r2, [r8]
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	bb72      	cbnz	r2, 8001bde <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b84:	602a      	str	r2, [r5, #0]
					break;
 8001b86:	e032      	b.n	8001bee <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b88:	f106 0a04 	add.w	sl, r6, #4
 8001b8c:	4650      	mov	r0, sl
 8001b8e:	f7ff fbe2 	bl	8001356 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b92:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001b94:	b119      	cbz	r1, 8001b9e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b96:	f106 0018 	add.w	r0, r6, #24
 8001b9a:	f7ff fbdc 	bl	8001356 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f04f 0e14 	mov.w	lr, #20
 8001ba4:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001ba6:	f8d9 3000 	ldr.w	r3, [r9]
 8001baa:	fa02 f100 	lsl.w	r1, r2, r0
 8001bae:	4319      	orrs	r1, r3
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <xTaskIncrementTick+0x114>)
 8001bb2:	f8c9 1000 	str.w	r1, [r9]
 8001bb6:	fb0e 3000 	mla	r0, lr, r0, r3
 8001bba:	4651      	mov	r1, sl
 8001bbc:	f7ff fba8 	bl	8001310 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001bc0:	6838      	ldr	r0, [r7, #0]
 8001bc2:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001bc4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001bc6:	4291      	cmp	r1, r2
 8001bc8:	bf28      	it	cs
 8001bca:	f04f 0b01 	movcs.w	fp, #1
 8001bce:	e7d3      	b.n	8001b78 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001bd0:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8001bd2:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8001bd6:	6813      	ldr	r3, [r2, #0]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	e011      	b.n	8001c02 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001bde:	f8d8 2000 	ldr.w	r2, [r8]
 8001be2:	68d2      	ldr	r2, [r2, #12]
 8001be4:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001be6:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001be8:	428c      	cmp	r4, r1
 8001bea:	d2cd      	bcs.n	8001b88 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001bec:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <xTaskIncrementTick+0x114>)
 8001bf2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bf4:	2214      	movs	r2, #20
 8001bf6:	434a      	muls	r2, r1
 8001bf8:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001bfa:	2a02      	cmp	r2, #2
 8001bfc:	bf28      	it	cs
 8001bfe:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001c02:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <xTaskIncrementTick+0x11c>)
 8001c04:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	bf18      	it	ne
 8001c0a:	f04f 0b01 	movne.w	fp, #1
}
 8001c0e:	4658      	mov	r0, fp
 8001c10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c14:	20000ce8 	.word	0x20000ce8
 8001c18:	20000d68 	.word	0x20000d68
 8001c1c:	20000c48 	.word	0x20000c48
 8001c20:	20000c4c 	.word	0x20000c4c
 8001c24:	20000d24 	.word	0x20000d24
 8001c28:	20000d20 	.word	0x20000d20
 8001c2c:	20000c44 	.word	0x20000c44
 8001c30:	20000c50 	.word	0x20000c50
 8001c34:	20000ce4 	.word	0x20000ce4
 8001c38:	20000d6c 	.word	0x20000d6c
 8001c3c:	20000cf0 	.word	0x20000cf0

08001c40 <xTaskResumeAll>:
{
 8001c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001c44:	4c31      	ldr	r4, [pc, #196]	; (8001d0c <xTaskResumeAll+0xcc>)
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	b943      	cbnz	r3, 8001c5c <xTaskResumeAll+0x1c>
 8001c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c4e:	f383 8811 	msr	BASEPRI, r3
 8001c52:	f3bf 8f6f 	isb	sy
 8001c56:	f3bf 8f4f 	dsb	sy
 8001c5a:	e7fe      	b.n	8001c5a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001c5c:	f7ff fbda 	bl	8001414 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c66:	6824      	ldr	r4, [r4, #0]
 8001c68:	b12c      	cbz	r4, 8001c76 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001c6a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001c6c:	f7ff fbf4 	bl	8001458 <vPortExitCritical>
}
 8001c70:	4620      	mov	r0, r4
 8001c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <xTaskResumeAll+0xd0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f5      	beq.n	8001c6a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c7e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001d28 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001c82:	4f24      	ldr	r7, [pc, #144]	; (8001d14 <xTaskResumeAll+0xd4>)
 8001c84:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001d2c <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c88:	f8d9 3000 	ldr.w	r3, [r9]
 8001c8c:	b9e3      	cbnz	r3, 8001cc8 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001c8e:	b10c      	cbz	r4, 8001c94 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001c90:	f7ff fdd8 	bl	8001844 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001c94:	4d20      	ldr	r5, [pc, #128]	; (8001d18 <xTaskResumeAll+0xd8>)
 8001c96:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001c98:	b144      	cbz	r4, 8001cac <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001c9a:	2701      	movs	r7, #1
 8001c9c:	4e1f      	ldr	r6, [pc, #124]	; (8001d1c <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8001c9e:	f7ff ff3d 	bl	8001b1c <xTaskIncrementTick>
 8001ca2:	b100      	cbz	r0, 8001ca6 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001ca4:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001ca6:	3c01      	subs	r4, #1
 8001ca8:	d1f9      	bne.n	8001c9e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001caa:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <xTaskResumeAll+0xdc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0da      	beq.n	8001c6a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <xTaskResumeAll+0xe0>)
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	f3bf 8f4f 	dsb	sy
 8001cc0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001cc4:	2401      	movs	r4, #1
 8001cc6:	e7d1      	b.n	8001c6c <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001cc8:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8001ccc:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001cce:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cd0:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001cd2:	f104 0018 	add.w	r0, r4, #24
 8001cd6:	f7ff fb3e 	bl	8001356 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cda:	4630      	mov	r0, r6
 8001cdc:	f7ff fb3b 	bl	8001356 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ce0:	2014      	movs	r0, #20
 8001ce2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ce4:	6839      	ldr	r1, [r7, #0]
 8001ce6:	fa05 f302 	lsl.w	r3, r5, r2
 8001cea:	430b      	orrs	r3, r1
 8001cec:	fb00 8002 	mla	r0, r0, r2, r8
 8001cf0:	4631      	mov	r1, r6
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	f7ff fb0c 	bl	8001310 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <xTaskResumeAll+0xe4>)
 8001cfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001d02:	bf24      	itt	cs
 8001d04:	4b05      	ldrcs	r3, [pc, #20]	; (8001d1c <xTaskResumeAll+0xdc>)
 8001d06:	601d      	strcs	r5, [r3, #0]
 8001d08:	e7be      	b.n	8001c88 <xTaskResumeAll+0x48>
 8001d0a:	bf00      	nop
 8001d0c:	20000ce8 	.word	0x20000ce8
 8001d10:	20000cdc 	.word	0x20000cdc
 8001d14:	20000cf0 	.word	0x20000cf0
 8001d18:	20000ce4 	.word	0x20000ce4
 8001d1c:	20000d6c 	.word	0x20000d6c
 8001d20:	e000ed04 	.word	0xe000ed04
 8001d24:	20000c44 	.word	0x20000c44
 8001d28:	20000d28 	.word	0x20000d28
 8001d2c:	20000c50 	.word	0x20000c50

08001d30 <vTaskDelay>:
	{
 8001d30:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001d32:	b940      	cbnz	r0, 8001d46 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <vTaskDelay+0x40>)
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	f3bf 8f4f 	dsb	sy
 8001d40:	f3bf 8f6f 	isb	sy
 8001d44:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <vTaskDelay+0x44>)
 8001d48:	6819      	ldr	r1, [r3, #0]
 8001d4a:	b141      	cbz	r1, 8001d5e <vTaskDelay+0x2e>
 8001d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d50:	f383 8811 	msr	BASEPRI, r3
 8001d54:	f3bf 8f6f 	isb	sy
 8001d58:	f3bf 8f4f 	dsb	sy
 8001d5c:	e7fe      	b.n	8001d5c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001d5e:	f7ff fed5 	bl	8001b0c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001d62:	f7ff fd81 	bl	8001868 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001d66:	f7ff ff6b 	bl	8001c40 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	d0e2      	beq.n	8001d34 <vTaskDelay+0x4>
 8001d6e:	bd08      	pop	{r3, pc}
 8001d70:	e000ed04 	.word	0xe000ed04
 8001d74:	20000ce8 	.word	0x20000ce8

08001d78 <prvIdleTask>:
{
 8001d78:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001d7a:	4e17      	ldr	r6, [pc, #92]	; (8001dd8 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d7c:	4c17      	ldr	r4, [pc, #92]	; (8001ddc <prvIdleTask+0x64>)
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	b963      	cbnz	r3, 8001d9c <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <prvIdleTask+0x68>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d9f8      	bls.n	8001d7c <prvIdleTask+0x4>
				taskYIELD();
 8001d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <prvIdleTask+0x6c>)
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f3bf 8f4f 	dsb	sy
 8001d96:	f3bf 8f6f 	isb	sy
 8001d9a:	e7ef      	b.n	8001d7c <prvIdleTask+0x4>
			vTaskSuspendAll();
 8001d9c:	f7ff feb6 	bl	8001b0c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001da0:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8001da2:	f7ff ff4d 	bl	8001c40 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8001da6:	2d00      	cmp	r5, #0
 8001da8:	d0e9      	beq.n	8001d7e <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8001daa:	f7ff fb33 	bl	8001414 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001dae:	68f3      	ldr	r3, [r6, #12]
 8001db0:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001db2:	1d28      	adds	r0, r5, #4
 8001db4:	f7ff facf 	bl	8001356 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001db8:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <prvIdleTask+0x70>)
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8001dc6:	f7ff fb47 	bl	8001458 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001dca:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001dcc:	f7ff fca0 	bl	8001710 <vPortFree>
			vPortFree( pxTCB );
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	f7ff fc9d 	bl	8001710 <vPortFree>
 8001dd6:	e7d2      	b.n	8001d7e <prvIdleTask+0x6>
 8001dd8:	20000d54 	.word	0x20000d54
 8001ddc:	20000ce0 	.word	0x20000ce0
 8001de0:	20000c50 	.word	0x20000c50
 8001de4:	e000ed04 	.word	0xe000ed04
 8001de8:	20000cdc 	.word	0x20000cdc

08001dec <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <vTaskSwitchContext+0x60>)
{
 8001dee:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <vTaskSwitchContext+0x64>)
 8001df4:	b112      	cbz	r2, 8001dfc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001df6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001dfc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <vTaskSwitchContext+0x68>)
 8001e00:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	2214      	movs	r2, #20
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	f1c3 031f 	rsb	r3, r3, #31
 8001e0e:	435a      	muls	r2, r3
 8001e10:	4911      	ldr	r1, [pc, #68]	; (8001e58 <vTaskSwitchContext+0x6c>)
 8001e12:	588c      	ldr	r4, [r1, r2]
 8001e14:	1888      	adds	r0, r1, r2
 8001e16:	b944      	cbnz	r4, 8001e2a <vTaskSwitchContext+0x3e>
	__asm volatile
 8001e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e1c:	f383 8811 	msr	BASEPRI, r3
 8001e20:	f3bf 8f6f 	isb	sy
 8001e24:	f3bf 8f4f 	dsb	sy
 8001e28:	e7fe      	b.n	8001e28 <vTaskSwitchContext+0x3c>
 8001e2a:	6844      	ldr	r4, [r0, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	6864      	ldr	r4, [r4, #4]
 8001e30:	440a      	add	r2, r1
 8001e32:	4294      	cmp	r4, r2
 8001e34:	bf08      	it	eq
 8001e36:	6862      	ldreq	r2, [r4, #4]
 8001e38:	6044      	str	r4, [r0, #4]
 8001e3a:	bf08      	it	eq
 8001e3c:	6042      	streq	r2, [r0, #4]
 8001e3e:	2214      	movs	r2, #20
 8001e40:	fb02 1303 	mla	r3, r2, r3, r1
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <vTaskSwitchContext+0x70>)
 8001e4a:	e7d5      	b.n	8001df8 <vTaskSwitchContext+0xc>
 8001e4c:	20000ce8 	.word	0x20000ce8
 8001e50:	20000d6c 	.word	0x20000d6c
 8001e54:	20000cf0 	.word	0x20000cf0
 8001e58:	20000c50 	.word	0x20000c50
 8001e5c:	20000c44 	.word	0x20000c44

08001e60 <xTaskRemoveFromEventList>:
{
 8001e60:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001e62:	68c3      	ldr	r3, [r0, #12]
 8001e64:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8001e66:	b944      	cbnz	r4, 8001e7a <xTaskRemoveFromEventList+0x1a>
 8001e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6c:	f383 8811 	msr	BASEPRI, r3
 8001e70:	f3bf 8f6f 	isb	sy
 8001e74:	f3bf 8f4f 	dsb	sy
 8001e78:	e7fe      	b.n	8001e78 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001e7a:	f104 0518 	add.w	r5, r4, #24
 8001e7e:	4628      	mov	r0, r5
 8001e80:	f7ff fa69 	bl	8001356 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <xTaskRemoveFromEventList+0x6c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	b9e3      	cbnz	r3, 8001ec4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001e8a:	1d25      	adds	r5, r4, #4
 8001e8c:	4628      	mov	r0, r5
 8001e8e:	f7ff fa62 	bl	8001356 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001e92:	2301      	movs	r3, #1
 8001e94:	490e      	ldr	r1, [pc, #56]	; (8001ed0 <xTaskRemoveFromEventList+0x70>)
 8001e96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e98:	6808      	ldr	r0, [r1, #0]
 8001e9a:	4093      	lsls	r3, r2
 8001e9c:	4303      	orrs	r3, r0
 8001e9e:	2014      	movs	r0, #20
 8001ea0:	600b      	str	r3, [r1, #0]
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <xTaskRemoveFromEventList+0x74>)
 8001ea6:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001eaa:	f7ff fa31 	bl	8001310 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <xTaskRemoveFromEventList+0x78>)
 8001eb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8001eb8:	bf85      	ittet	hi
 8001eba:	2001      	movhi	r0, #1
 8001ebc:	4b07      	ldrhi	r3, [pc, #28]	; (8001edc <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8001ebe:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8001ec0:	6018      	strhi	r0, [r3, #0]
}
 8001ec2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	4806      	ldr	r0, [pc, #24]	; (8001ee0 <xTaskRemoveFromEventList+0x80>)
 8001ec8:	e7ef      	b.n	8001eaa <xTaskRemoveFromEventList+0x4a>
 8001eca:	bf00      	nop
 8001ecc:	20000ce8 	.word	0x20000ce8
 8001ed0:	20000cf0 	.word	0x20000cf0
 8001ed4:	20000c50 	.word	0x20000c50
 8001ed8:	20000c44 	.word	0x20000c44
 8001edc:	20000d6c 	.word	0x20000d6c
 8001ee0:	20000d28 	.word	0x20000d28

08001ee4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ee4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f7ff f9f8 	bl	80012dc <osDelay>
 8001eec:	e7fb      	b.n	8001ee6 <StartDefaultTask+0x2>

08001eee <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8001eee:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartLedTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(30);
 8001ef0:	201e      	movs	r0, #30
 8001ef2:	f7ff f9f3 	bl	80012dc <osDelay>
 8001ef6:	e7fb      	b.n	8001ef0 <StartLedTask+0x2>

08001ef8 <StartButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void const * argument)
{
 8001ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN StartButtonTask */
	int test, i;
	test = 0;
 8001efa:	2500      	movs	r5, #0
  /* Infinite loop */
  for(;;)
  {

    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8001efc:	4f16      	ldr	r7, [pc, #88]	; (8001f58 <StartButtonTask+0x60>)
      test ++;
      HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
    } else {
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001efe:	4c17      	ldr	r4, [pc, #92]	; (8001f5c <StartButtonTask+0x64>)
    if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8001f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f04:	4638      	mov	r0, r7
 8001f06:	f7fe fa79 	bl	80003fc <HAL_GPIO_ReadPin>
 8001f0a:	bb18      	cbnz	r0, 8001f54 <StartButtonTask+0x5c>
      HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001f0c:	2201      	movs	r2, #1
      test ++;
 8001f0e:	3501      	adds	r5, #1
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f10:	2120      	movs	r1, #32
 8001f12:	4620      	mov	r0, r4
 8001f14:	f7fe fa78 	bl	8000408 <HAL_GPIO_WritePin>
    }
    osDelay(20000);
 8001f18:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001f1c:	f7ff f9de 	bl	80012dc <osDelay>

    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) {
 8001f20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f24:	4638      	mov	r0, r7
 8001f26:	f7fe fa69 	bl	80003fc <HAL_GPIO_ReadPin>
 8001f2a:	2801      	cmp	r0, #1
 8001f2c:	d1e8      	bne.n	8001f00 <StartButtonTask+0x8>
 8001f2e:	2600      	movs	r6, #0
      for (i = 0; i < test; i++) {
 8001f30:	42b5      	cmp	r5, r6
 8001f32:	d0e5      	beq.n	8001f00 <StartButtonTask+0x8>
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001f34:	2201      	movs	r2, #1
 8001f36:	2120      	movs	r1, #32
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f7fe fa65 	bl	8000408 <HAL_GPIO_WritePin>
	    osDelay(10000);
 8001f3e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001f42:	f7ff f9cb 	bl	80012dc <osDelay>
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2120      	movs	r1, #32
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f7fe fa5c 	bl	8000408 <HAL_GPIO_WritePin>
      for (i = 0; i < test; i++) {
 8001f50:	3601      	adds	r6, #1
 8001f52:	e7ed      	b.n	8001f30 <StartButtonTask+0x38>
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f54:	2200      	movs	r2, #0
 8001f56:	e7db      	b.n	8001f10 <StartButtonTask+0x18>
 8001f58:	40020800 	.word	0x40020800
 8001f5c:	40020000 	.word	0x40020000

08001f60 <SystemClock_Config>:
{
 8001f60:	b530      	push	{r4, r5, lr}
 8001f62:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f64:	2234      	movs	r2, #52	; 0x34
 8001f66:	2100      	movs	r1, #0
 8001f68:	a805      	add	r0, sp, #20
 8001f6a:	f000 f9e9 	bl	8002340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2214      	movs	r2, #20
 8001f72:	4668      	mov	r0, sp
 8001f74:	f000 f9e4 	bl	8002340 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f78:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <SystemClock_Config+0x64>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f7a:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f7c:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f7e:	2501      	movs	r5, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f80:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001f84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f88:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f8e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001f90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f94:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001f96:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001f98:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f9c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f9e:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001fa0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fa2:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fa4:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa6:	f7fe fa75 	bl	8000494 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001faa:	220f      	movs	r2, #15
 8001fac:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001fae:	4629      	mov	r1, r5
 8001fb0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fb2:	e88d 000c 	stmia.w	sp, {r2, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb6:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fb8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fba:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001fbc:	f7fe fe04 	bl	8000bc8 <HAL_RCC_ClockConfig>
}
 8001fc0:	b013      	add	sp, #76	; 0x4c
 8001fc2:	bd30      	pop	{r4, r5, pc}
 8001fc4:	40007000 	.word	0x40007000

08001fc8 <main>:
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b096      	sub	sp, #88	; 0x58
  HAL_Init();
 8001fcc:	f7fe f8d8 	bl	8000180 <HAL_Init>
  SystemClock_Config();
 8001fd0:	f7ff ffc6 	bl	8001f60 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	2214      	movs	r2, #20
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	a811      	add	r0, sp, #68	; 0x44
 8001fda:	f000 f9b1 	bl	8002340 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fde:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <main+0x11c>)
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fe0:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fe4:	4840      	ldr	r0, [pc, #256]	; (80020e8 <main+0x120>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe6:	f042 0204 	orr.w	r2, r2, #4
 8001fea:	61da      	str	r2, [r3, #28]
 8001fec:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff0:	f002 0204 	and.w	r2, r2, #4
 8001ff4:	9201      	str	r2, [sp, #4]
 8001ff6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ff8:	69da      	ldr	r2, [r3, #28]
  osMessageQDef(eventQueue, 16, uint16_t);
 8001ffa:	4c3c      	ldr	r4, [pc, #240]	; (80020ec <main+0x124>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ffc:	f042 0220 	orr.w	r2, r2, #32
 8002000:	61da      	str	r2, [r3, #28]
 8002002:	69da      	ldr	r2, [r3, #28]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002004:	f104 0708 	add.w	r7, r4, #8
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002008:	f002 0220 	and.w	r2, r2, #32
 800200c:	9202      	str	r2, [sp, #8]
 800200e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002010:	69da      	ldr	r2, [r3, #28]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002012:	ae07      	add	r6, sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002014:	f042 0201 	orr.w	r2, r2, #1
 8002018:	61da      	str	r2, [r3, #28]
 800201a:	69da      	ldr	r2, [r3, #28]
 800201c:	f002 0201 	and.w	r2, r2, #1
 8002020:	9203      	str	r2, [sp, #12]
 8002022:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	f042 0202 	orr.w	r2, r2, #2
 800202a:	61da      	str	r2, [r3, #28]
 800202c:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	9304      	str	r3, [sp, #16]
 8002036:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002038:	f7fe f9e6 	bl	8000408 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800203c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002040:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002042:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <main+0x128>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002044:	a911      	add	r1, sp, #68	; 0x44
 8002046:	482b      	ldr	r0, [pc, #172]	; (80020f4 <main+0x12c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002048:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	9513      	str	r5, [sp, #76]	; 0x4c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800204c:	f7fe f904 	bl	8000258 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8002050:	2320      	movs	r3, #32
 8002052:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002054:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002056:	a911      	add	r1, sp, #68	; 0x44
 8002058:	4823      	ldr	r0, [pc, #140]	; (80020e8 <main+0x120>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205a:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	9514      	str	r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002060:	f7fe f8fa 	bl	8000258 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8002064:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 8002068:	4823      	ldr	r0, [pc, #140]	; (80020f8 <main+0x130>)
  huart2.Init.BaudRate = 115200;
 800206a:	4a24      	ldr	r2, [pc, #144]	; (80020fc <main+0x134>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800206c:	6085      	str	r5, [r0, #8]
  huart2.Init.BaudRate = 115200;
 800206e:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002072:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002074:	60c5      	str	r5, [r0, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002076:	6143      	str	r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002078:	6105      	str	r5, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207a:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800207c:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800207e:	f7ff f8e3 	bl	8001248 <HAL_UART_Init>
  osMessageQDef(eventQueue, 16, uint16_t);
 8002082:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002086:	ab05      	add	r3, sp, #20
 8002088:	e883 0003 	stmia.w	r3, {r0, r1}
  eventQueueHandle = osMessageCreate(osMessageQ(eventQueue), NULL);
 800208c:	4629      	mov	r1, r5
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff f92c 	bl	80012ec <osMessageCreate>
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <main+0x138>)
 8002096:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002098:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800209a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800209c:	683b      	ldr	r3, [r7, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800209e:	4629      	mov	r1, r5
 80020a0:	a807      	add	r0, sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80020a2:	6033      	str	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80020a4:	f7ff f901 	bl	80012aa <osThreadCreate>
 80020a8:	4b16      	ldr	r3, [pc, #88]	; (8002104 <main+0x13c>)
  osThreadDef(ledTask, StartLedTask, osPriorityIdle, 0, 128);
 80020aa:	f104 071c 	add.w	r7, r4, #28
 80020ae:	ae0c      	add	r6, sp, #48	; 0x30
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80020b0:	6018      	str	r0, [r3, #0]
  osThreadDef(ledTask, StartLedTask, osPriorityIdle, 0, 128);
 80020b2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80020b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80020b6:	683b      	ldr	r3, [r7, #0]
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 80020b8:	4629      	mov	r1, r5
 80020ba:	a80c      	add	r0, sp, #48	; 0x30
  osThreadDef(ledTask, StartLedTask, osPriorityIdle, 0, 128);
 80020bc:	6033      	str	r3, [r6, #0]
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 80020be:	f7ff f8f4 	bl	80012aa <osThreadCreate>
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <main+0x140>)
  osThreadDef(buttonTask, StartButtonTask, osPriorityIdle, 0, 128);
 80020c4:	ae11      	add	r6, sp, #68	; 0x44
 80020c6:	3430      	adds	r4, #48	; 0x30
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 80020c8:	6018      	str	r0, [r3, #0]
  osThreadDef(buttonTask, StartButtonTask, osPriorityIdle, 0, 128);
 80020ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80020ce:	6823      	ldr	r3, [r4, #0]
  buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 80020d0:	4629      	mov	r1, r5
 80020d2:	a811      	add	r0, sp, #68	; 0x44
  osThreadDef(buttonTask, StartButtonTask, osPriorityIdle, 0, 128);
 80020d4:	6033      	str	r3, [r6, #0]
  buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 80020d6:	f7ff f8e8 	bl	80012aa <osThreadCreate>
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <main+0x144>)
 80020dc:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80020de:	f7ff f8df 	bl	80012a0 <osKernelStart>
 80020e2:	e7fe      	b.n	80020e2 <main+0x11a>
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020000 	.word	0x40020000
 80020ec:	08002368 	.word	0x08002368
 80020f0:	10110000 	.word	0x10110000
 80020f4:	40020800 	.word	0x40020800
 80020f8:	20000d84 	.word	0x20000d84
 80020fc:	40004400 	.word	0x40004400
 8002100:	20000d7c 	.word	0x20000d7c
 8002104:	20000d74 	.word	0x20000d74
 8002108:	20000d78 	.word	0x20000d78
 800210c:	20000d80 	.word	0x20000d80

08002110 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002110:	6803      	ldr	r3, [r0, #0]
 8002112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002116:	d101      	bne.n	800211c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002118:	f7fe b83e 	b.w	8000198 <HAL_IncTick>
 800211c:	4770      	bx	lr
	...

08002120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_MspInit+0x4c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002124:	210f      	movs	r1, #15
  __HAL_RCC_COMP_CLK_ENABLE();
 8002126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002128:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_COMP_CLK_ENABLE();
 800212c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
 8002132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002134:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002138:	9201      	str	r2, [sp, #4]
 800213a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213c:	6a1a      	ldr	r2, [r3, #32]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	621a      	str	r2, [r3, #32]
 8002144:	6a1a      	ldr	r2, [r3, #32]
 8002146:	f002 0201 	and.w	r2, r2, #1
 800214a:	9202      	str	r2, [sp, #8]
 800214c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002150:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002158:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	9303      	str	r3, [sp, #12]
 8002160:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002162:	f7fe f839 	bl	80001d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002166:	b005      	add	sp, #20
 8002168:	f85d fb04 	ldr.w	pc, [sp], #4
 800216c:	40023800 	.word	0x40023800

08002170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002170:	b510      	push	{r4, lr}
 8002172:	4604      	mov	r4, r0
 8002174:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002176:	2214      	movs	r2, #20
 8002178:	2100      	movs	r1, #0
 800217a:	a803      	add	r0, sp, #12
 800217c:	f000 f8e0 	bl	8002340 <memset>
  if(huart->Instance==USART2)
 8002180:	6822      	ldr	r2, [r4, #0]
 8002182:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <HAL_UART_MspInit+0x60>)
 8002184:	429a      	cmp	r2, r3
 8002186:	d121      	bne.n	80021cc <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002188:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800218c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218e:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002190:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
 8002196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	480e      	ldr	r0, [pc, #56]	; (80021d4 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800219a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800219e:	9201      	str	r2, [sp, #4]
 80021a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	61da      	str	r2, [r3, #28]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	9302      	str	r3, [sp, #8]
 80021b2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021b4:	230c      	movs	r3, #12
 80021b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021bc:	2301      	movs	r3, #1
 80021be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021c4:	2307      	movs	r3, #7
 80021c6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c8:	f7fe f846 	bl	8000258 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021cc:	b008      	add	sp, #32
 80021ce:	bd10      	pop	{r4, pc}
 80021d0:	40004400 	.word	0x40004400
 80021d4:	40020000 	.word	0x40020000

080021d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d8:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 80021da:	4601      	mov	r1, r0
{
 80021dc:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 80021de:	2200      	movs	r2, #0
 80021e0:	201c      	movs	r0, #28
 80021e2:	f7fd fff9 	bl	80001d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 80021e6:	201c      	movs	r0, #28
 80021e8:	f7fe f82a 	bl	8000240 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021ee:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM2_CLK_ENABLE();
 80021f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021f2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 80021f4:	f042 0201 	orr.w	r2, r2, #1
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80021fc:	4c11      	ldr	r4, [pc, #68]	; (8002244 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	9302      	str	r3, [sp, #8]
 8002204:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002206:	f7fe fded 	bl	8000de4 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800220a:	f7fe fdbb 	bl	8000d84 <HAL_RCC_GetPCLK1Freq>
  htim2.Instance = TIM2;
 800220e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002212:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8002214:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002218:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_InitTick+0x70>)
 800221c:	fbb0 f0f3 	udiv	r0, r0, r3
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8002220:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002222:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8002224:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002226:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = 0;
 8002228:	6123      	str	r3, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800222c:	f7fe fe3b 	bl	8000ea6 <HAL_TIM_Base_Init>
 8002230:	b920      	cbnz	r0, 800223c <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002232:	4620      	mov	r0, r4
 8002234:	f7fe fe51 	bl	8000eda <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002238:	b008      	add	sp, #32
 800223a:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800223c:	2001      	movs	r0, #1
 800223e:	e7fb      	b.n	8002238 <HAL_InitTick+0x60>
 8002240:	40023800 	.word	0x40023800
 8002244:	20000dc4 	.word	0x20000dc4
 8002248:	000f4240 	.word	0x000f4240

0800224c <NMI_Handler>:
 800224c:	4770      	bx	lr

0800224e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224e:	e7fe      	b.n	800224e <HardFault_Handler>

08002250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002250:	e7fe      	b.n	8002250 <MemManage_Handler>

08002252 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002252:	e7fe      	b.n	8002252 <BusFault_Handler>

08002254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002254:	e7fe      	b.n	8002254 <UsageFault_Handler>

08002256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002256:	4770      	bx	lr

08002258 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002258:	4801      	ldr	r0, [pc, #4]	; (8002260 <TIM2_IRQHandler+0x8>)
 800225a:	f7fe be4d 	b.w	8000ef8 <HAL_TIM_IRQHandler>
 800225e:	bf00      	nop
 8002260:	20000dc4 	.word	0x20000dc4

08002264 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <SystemInit+0x3c>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800226c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800226e:	6899      	ldr	r1, [r3, #8]
 8002270:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <SystemInit+0x40>)
 8002272:	400a      	ands	r2, r1
 8002274:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 800227c:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8002280:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002288:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8002290:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002296:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800229a:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <SystemInit+0x44>)
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	4770      	bx	lr
 80022a0:	40023800 	.word	0x40023800
 80022a4:	88ffc00c 	.word	0x88ffc00c
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80022ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80022ae:	e003      	b.n	80022b8 <LoopCopyDataInit>

080022b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80022b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80022b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80022b6:	3104      	adds	r1, #4

080022b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80022b8:	480a      	ldr	r0, [pc, #40]	; (80022e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80022bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80022be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80022c0:	d3f6      	bcc.n	80022b0 <CopyDataInit>
  ldr r2, =_sbss
 80022c2:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80022c4:	e002      	b.n	80022cc <LoopFillZerobss>

080022c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80022c8:	f842 3b04 	str.w	r3, [r2], #4

080022cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80022ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80022d0:	d3f9      	bcc.n	80022c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022d2:	f7ff ffc7 	bl	8002264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d6:	f000 f80f 	bl	80022f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022da:	f7ff fe75 	bl	8001fc8 <main>
  bx lr
 80022de:	4770      	bx	lr
  ldr r3, =_sidata
 80022e0:	080023fc 	.word	0x080023fc
  ldr r0, =_sdata
 80022e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80022e8:	20000008 	.word	0x20000008
  ldr r2, =_sbss
 80022ec:	20000008 	.word	0x20000008
  ldr r3, = _ebss
 80022f0:	20000dfc 	.word	0x20000dfc

080022f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022f4:	e7fe      	b.n	80022f4 <ADC1_IRQHandler>
	...

080022f8 <__libc_init_array>:
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	2500      	movs	r5, #0
 80022fc:	4e0c      	ldr	r6, [pc, #48]	; (8002330 <__libc_init_array+0x38>)
 80022fe:	4c0d      	ldr	r4, [pc, #52]	; (8002334 <__libc_init_array+0x3c>)
 8002300:	1ba4      	subs	r4, r4, r6
 8002302:	10a4      	asrs	r4, r4, #2
 8002304:	42a5      	cmp	r5, r4
 8002306:	d109      	bne.n	800231c <__libc_init_array+0x24>
 8002308:	f000 f822 	bl	8002350 <_init>
 800230c:	2500      	movs	r5, #0
 800230e:	4e0a      	ldr	r6, [pc, #40]	; (8002338 <__libc_init_array+0x40>)
 8002310:	4c0a      	ldr	r4, [pc, #40]	; (800233c <__libc_init_array+0x44>)
 8002312:	1ba4      	subs	r4, r4, r6
 8002314:	10a4      	asrs	r4, r4, #2
 8002316:	42a5      	cmp	r5, r4
 8002318:	d105      	bne.n	8002326 <__libc_init_array+0x2e>
 800231a:	bd70      	pop	{r4, r5, r6, pc}
 800231c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002320:	4798      	blx	r3
 8002322:	3501      	adds	r5, #1
 8002324:	e7ee      	b.n	8002304 <__libc_init_array+0xc>
 8002326:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800232a:	4798      	blx	r3
 800232c:	3501      	adds	r5, #1
 800232e:	e7f2      	b.n	8002316 <__libc_init_array+0x1e>
 8002330:	080023f4 	.word	0x080023f4
 8002334:	080023f4 	.word	0x080023f4
 8002338:	080023f4 	.word	0x080023f4
 800233c:	080023f8 	.word	0x080023f8

08002340 <memset>:
 8002340:	4603      	mov	r3, r0
 8002342:	4402      	add	r2, r0
 8002344:	4293      	cmp	r3, r2
 8002346:	d100      	bne.n	800234a <memset+0xa>
 8002348:	4770      	bx	lr
 800234a:	f803 1b01 	strb.w	r1, [r3], #1
 800234e:	e7f9      	b.n	8002344 <memset+0x4>

08002350 <_init>:
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	bf00      	nop
 8002354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002356:	bc08      	pop	{r3}
 8002358:	469e      	mov	lr, r3
 800235a:	4770      	bx	lr

0800235c <_fini>:
 800235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235e:	bf00      	nop
 8002360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002362:	bc08      	pop	{r3}
 8002364:	469e      	mov	lr, r3
 8002366:	4770      	bx	lr
