
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001284  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080013c0  080013c0  000113c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080013e4  080013e4  000113e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013e8  080013e8  000113e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080013ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000060  20000004  080013f0  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000064  080013f0  00020064  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a781  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001813  00000000  00000000  0002a7ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002246  00000000  00000000  0002bfc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000438  00000000  00000000  0002e208  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000768  00000000  00000000  0002e640  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002cff  00000000  00000000  0002eda8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001dad  00000000  00000000  00031aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00033854  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000009e4  00000000  00000000  000338d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	080013a8 	.word	0x080013a8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	080013a8 	.word	0x080013a8

0800017c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800017c:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <HAL_InitTick+0x24>)
{
 800017e:	b510      	push	{r4, lr}
 8000180:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000182:	6818      	ldr	r0, [r3, #0]
 8000184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000188:	fbb0 f0f3 	udiv	r0, r0, r3
 800018c:	f000 f86a 	bl	8000264 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000190:	2200      	movs	r2, #0
 8000192:	4621      	mov	r1, r4
 8000194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000198:	f000 f830 	bl	80001fc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800019c:	2000      	movs	r0, #0
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000

080001a4 <HAL_Init>:
{
 80001a4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a6:	2003      	movs	r0, #3
 80001a8:	f000 f816 	bl	80001d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ac:	2000      	movs	r0, #0
 80001ae:	f7ff ffe5 	bl	800017c <HAL_InitTick>
  HAL_MspInit();
 80001b2:	f001 f81f 	bl	80011f4 <HAL_MspInit>
}
 80001b6:	2000      	movs	r0, #0
 80001b8:	bd08      	pop	{r3, pc}
	...

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001bc:	4a02      	ldr	r2, [pc, #8]	; (80001c8 <HAL_IncTick+0xc>)
 80001be:	6813      	ldr	r3, [r2, #0]
 80001c0:	3301      	adds	r3, #1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000020 	.word	0x20000020

080001cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001cc:	4b01      	ldr	r3, [pc, #4]	; (80001d4 <HAL_GetTick+0x8>)
 80001ce:	6818      	ldr	r0, [r3, #0]
}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000020 	.word	0x20000020

080001d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4a07      	ldr	r2, [pc, #28]	; (80001f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001da:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001e6:	041b      	lsls	r3, r3, #16
 80001e8:	0c1b      	lsrs	r3, r3, #16
 80001ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f4:	60d3      	str	r3, [r2, #12]
 80001f6:	4770      	bx	lr
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80001fe:	b530      	push	{r4, r5, lr}
 8000200:	68dc      	ldr	r4, [r3, #12]
 8000202:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000206:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020c:	2b04      	cmp	r3, #4
 800020e:	bf28      	it	cs
 8000210:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000212:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000214:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000218:	bf98      	it	ls
 800021a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800021c:	fa05 f303 	lsl.w	r3, r5, r3
 8000220:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000224:	bf88      	it	hi
 8000226:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000228:	4019      	ands	r1, r3
 800022a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800022c:	fa05 f404 	lsl.w	r4, r5, r4
 8000230:	3c01      	subs	r4, #1
 8000232:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000234:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000236:	ea42 0201 	orr.w	r2, r2, r1
 800023a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023e:	bfaf      	iteee	ge
 8000240:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000244:	4b06      	ldrlt	r3, [pc, #24]	; (8000260 <HAL_NVIC_SetPriority+0x64>)
 8000246:	f000 000f 	andlt.w	r0, r0, #15
 800024a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024c:	bfa5      	ittet	ge
 800024e:	b2d2      	uxtbge	r2, r2
 8000250:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000254:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000256:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800025a:	bd30      	pop	{r4, r5, pc}
 800025c:	e000ed00 	.word	0xe000ed00
 8000260:	e000ed14 	.word	0xe000ed14

08000264 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000264:	3801      	subs	r0, #1
 8000266:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800026a:	d20a      	bcs.n	8000282 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000272:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000278:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800027a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800027c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000282:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	e000e010 	.word	0xe000e010
 800028c:	e000ed00 	.word	0xe000ed00

08000290 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 8000290:	2300      	movs	r3, #0
{ 
 8000292:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000296:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800029a:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8000430 <HAL_GPIO_Init+0x1a0>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800029e:	4a62      	ldr	r2, [pc, #392]	; (8000428 <HAL_GPIO_Init+0x198>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80002a0:	fa38 f403 	lsrs.w	r4, r8, r3
 80002a4:	d102      	bne.n	80002ac <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 80002a6:	b003      	add	sp, #12
 80002a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80002ac:	f04f 0e01 	mov.w	lr, #1
 80002b0:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 80002b4:	ea18 060e 	ands.w	r6, r8, lr
 80002b8:	f000 80a8 	beq.w	800040c <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80002bc:	684c      	ldr	r4, [r1, #4]
 80002be:	f024 0710 	bic.w	r7, r4, #16
 80002c2:	2f02      	cmp	r7, #2
 80002c4:	d116      	bne.n	80002f4 <HAL_GPIO_Init+0x64>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80002c6:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3];
 80002ca:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80002ce:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80002d2:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80002d6:	f8da 5020 	ldr.w	r5, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80002da:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80002de:	fa0c fc0b 	lsl.w	ip, ip, fp
 80002e2:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80002e6:	690d      	ldr	r5, [r1, #16]
 80002e8:	fa05 f50b 	lsl.w	r5, r5, fp
 80002ec:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80002f0:	f8ca 5020 	str.w	r5, [sl, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80002f4:	2503      	movs	r5, #3
 80002f6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 80002fa:	fa05 f50a 	lsl.w	r5, r5, sl
 80002fe:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 8000300:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000304:	f004 0c03 	and.w	ip, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000308:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800030c:	fa0c fc0a 	lsl.w	ip, ip, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000310:	3f01      	subs	r7, #1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000312:	ea4c 0c0b 	orr.w	ip, ip, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000316:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000318:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800031c:	d811      	bhi.n	8000342 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR; 
 800031e:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000320:	ea07 0b05 	and.w	fp, r7, r5
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000324:	68cf      	ldr	r7, [r1, #12]
 8000326:	fa07 fc0a 	lsl.w	ip, r7, sl
 800032a:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800032e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000330:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000332:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000336:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800033a:	409f      	lsls	r7, r3
 800033c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000340:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000342:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000344:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000346:	688f      	ldr	r7, [r1, #8]
 8000348:	fa07 f70a 	lsl.w	r7, r7, sl
 800034c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800034e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000350:	00e5      	lsls	r5, r4, #3
 8000352:	d55b      	bpl.n	800040c <HAL_GPIO_Init+0x17c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000354:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000358:	f8d9 5020 	ldr.w	r5, [r9, #32]
 800035c:	f023 0703 	bic.w	r7, r3, #3
 8000360:	f045 0501 	orr.w	r5, r5, #1
 8000364:	f8c9 5020 	str.w	r5, [r9, #32]
 8000368:	f8d9 5020 	ldr.w	r5, [r9, #32]
 800036c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000370:	f005 0501 	and.w	r5, r5, #1
 8000374:	9501      	str	r5, [sp, #4]
 8000376:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800037a:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800037e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000380:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8000384:	f8d7 a008 	ldr.w	sl, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000388:	fa0c f50e 	lsl.w	r5, ip, lr
 800038c:	ea2a 0c05 	bic.w	ip, sl, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000390:	4d26      	ldr	r5, [pc, #152]	; (800042c <HAL_GPIO_Init+0x19c>)
 8000392:	42a8      	cmp	r0, r5
 8000394:	d03c      	beq.n	8000410 <HAL_GPIO_Init+0x180>
 8000396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039a:	42a8      	cmp	r0, r5
 800039c:	d03a      	beq.n	8000414 <HAL_GPIO_Init+0x184>
 800039e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a2:	42a8      	cmp	r0, r5
 80003a4:	d038      	beq.n	8000418 <HAL_GPIO_Init+0x188>
 80003a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003aa:	42a8      	cmp	r0, r5
 80003ac:	d036      	beq.n	800041c <HAL_GPIO_Init+0x18c>
 80003ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b2:	42a8      	cmp	r0, r5
 80003b4:	d034      	beq.n	8000420 <HAL_GPIO_Init+0x190>
 80003b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ba:	42a8      	cmp	r0, r5
 80003bc:	d032      	beq.n	8000424 <HAL_GPIO_Init+0x194>
 80003be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003c2:	42a8      	cmp	r0, r5
 80003c4:	bf14      	ite	ne
 80003c6:	2507      	movne	r5, #7
 80003c8:	2506      	moveq	r5, #6
 80003ca:	fa05 f50e 	lsl.w	r5, r5, lr
 80003ce:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80003d2:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80003d4:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 80003d6:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003d8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80003dc:	bf0c      	ite	eq
 80003de:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80003e0:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80003e2:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80003e4:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003e6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80003ea:	bf0c      	ite	eq
 80003ec:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80003ee:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 80003f0:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80003f2:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003f4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80003f8:	bf0c      	ite	eq
 80003fa:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80003fc:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80003fe:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000400:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000402:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000404:	bf54      	ite	pl
 8000406:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8000408:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 800040a:	60d5      	str	r5, [r2, #12]
    position++;
 800040c:	3301      	adds	r3, #1
 800040e:	e747      	b.n	80002a0 <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000410:	2500      	movs	r5, #0
 8000412:	e7da      	b.n	80003ca <HAL_GPIO_Init+0x13a>
 8000414:	2501      	movs	r5, #1
 8000416:	e7d8      	b.n	80003ca <HAL_GPIO_Init+0x13a>
 8000418:	2502      	movs	r5, #2
 800041a:	e7d6      	b.n	80003ca <HAL_GPIO_Init+0x13a>
 800041c:	2503      	movs	r5, #3
 800041e:	e7d4      	b.n	80003ca <HAL_GPIO_Init+0x13a>
 8000420:	2504      	movs	r5, #4
 8000422:	e7d2      	b.n	80003ca <HAL_GPIO_Init+0x13a>
 8000424:	2505      	movs	r5, #5
 8000426:	e7d0      	b.n	80003ca <HAL_GPIO_Init+0x13a>
 8000428:	40010400 	.word	0x40010400
 800042c:	40020000 	.word	0x40020000
 8000430:	40023800 	.word	0x40023800

08000434 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000434:	b10a      	cbz	r2, 800043a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000436:	6181      	str	r1, [r0, #24]
 8000438:	4770      	bx	lr
 800043a:	0409      	lsls	r1, r1, #16
 800043c:	e7fb      	b.n	8000436 <HAL_GPIO_WritePin+0x2>

0800043e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800043e:	6943      	ldr	r3, [r0, #20]
 8000440:	4059      	eors	r1, r3
 8000442:	6141      	str	r1, [r0, #20]
 8000444:	4770      	bx	lr
	...

08000448 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000448:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 800044a:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800044c:	689a      	ldr	r2, [r3, #8]
 800044e:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8000452:	d00c      	beq.n	800046e <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8000454:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8000456:	491a      	ldr	r1, [pc, #104]	; (80004c0 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000458:	680b      	ldr	r3, [r1, #0]
 800045a:	f023 0301 	bic.w	r3, r3, #1
 800045e:	4313      	orrs	r3, r2
 8000460:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000462:	6808      	ldr	r0, [r1, #0]
 8000464:	f000 0001 	and.w	r0, r0, #1
 8000468:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 800046a:	b002      	add	sp, #8
 800046c:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800046e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000470:	4914      	ldr	r1, [pc, #80]	; (80004c4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000472:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000476:	d00f      	beq.n	8000498 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000478:	680a      	ldr	r2, [r1, #0]
 800047a:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800047e:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8000482:	d1e7      	bne.n	8000454 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000484:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8000488:	d1e4      	bne.n	8000454 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 800048a:	4a0d      	ldr	r2, [pc, #52]	; (80004c0 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 800048c:	6813      	ldr	r3, [r2, #0]
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8000494:	2201      	movs	r2, #1
 8000496:	e7de      	b.n	8000456 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800049a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800049e:	625a      	str	r2, [r3, #36]	; 0x24
 80004a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004a2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80004a6:	9201      	str	r2, [sp, #4]
 80004a8:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004aa:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80004ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004ae:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80004b2:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80004b6:	6259      	str	r1, [r3, #36]	; 0x24
 80004b8:	e7e1      	b.n	800047e <RCC_SetFlashLatencyFromMSIRange+0x36>
 80004ba:	bf00      	nop
 80004bc:	40023800 	.word	0x40023800
 80004c0:	40023c00 	.word	0x40023c00
 80004c4:	40007000 	.word	0x40007000

080004c8 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004c8:	6803      	ldr	r3, [r0, #0]
{
 80004ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ce:	07d9      	lsls	r1, r3, #31
{
 80004d0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004d2:	d46a      	bmi.n	80005aa <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004d4:	6823      	ldr	r3, [r4, #0]
 80004d6:	079a      	lsls	r2, r3, #30
 80004d8:	f100 80e6 	bmi.w	80006a8 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80004dc:	6823      	ldr	r3, [r4, #0]
 80004de:	06de      	lsls	r6, r3, #27
 80004e0:	d555      	bpl.n	800058e <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80004e2:	4dc1      	ldr	r5, [pc, #772]	; (80007e8 <HAL_RCC_OscConfig+0x320>)
 80004e4:	68ab      	ldr	r3, [r5, #8]
 80004e6:	f013 0f0c 	tst.w	r3, #12
 80004ea:	f040 8183 	bne.w	80007f4 <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004f2:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80004f6:	6829      	ldr	r1, [r5, #0]
 80004f8:	fa93 f3a3 	rbit	r3, r3
 80004fc:	fab3 f383 	clz	r3, r3
 8000500:	2201      	movs	r2, #1
 8000502:	f003 031f 	and.w	r3, r3, #31
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	420b      	tst	r3, r1
 800050c:	d002      	beq.n	8000514 <HAL_RCC_OscConfig+0x4c>
 800050e:	69a3      	ldr	r3, [r4, #24]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d06e      	beq.n	80005f2 <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000514:	4db4      	ldr	r5, [pc, #720]	; (80007e8 <HAL_RCC_OscConfig+0x320>)
 8000516:	6a20      	ldr	r0, [r4, #32]
 8000518:	686b      	ldr	r3, [r5, #4]
 800051a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800051e:	4298      	cmp	r0, r3
 8000520:	f240 814a 	bls.w	80007b8 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000524:	f7ff ff90 	bl	8000448 <RCC_SetFlashLatencyFromMSIRange>
 8000528:	2800      	cmp	r0, #0
 800052a:	d162      	bne.n	80005f2 <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800052c:	686b      	ldr	r3, [r5, #4]
 800052e:	6a22      	ldr	r2, [r4, #32]
 8000530:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000534:	4313      	orrs	r3, r2
 8000536:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000538:	6869      	ldr	r1, [r5, #4]
 800053a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800053e:	fa93 f3a3 	rbit	r3, r3
 8000542:	fab3 f283 	clz	r2, r3
 8000546:	69e3      	ldr	r3, [r4, #28]
 8000548:	4093      	lsls	r3, r2
 800054a:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800054e:	4313      	orrs	r3, r2
 8000550:	606b      	str	r3, [r5, #4]
 8000552:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000556:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800055a:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800055e:	4ba2      	ldr	r3, [pc, #648]	; (80007e8 <HAL_RCC_OscConfig+0x320>)
 8000560:	21f0      	movs	r1, #240	; 0xf0
 8000562:	689a      	ldr	r2, [r3, #8]
 8000564:	fa91 f1a1 	rbit	r1, r1
 8000568:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800056c:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800056e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000572:	40c3      	lsrs	r3, r0
 8000574:	1c58      	adds	r0, r3, #1
 8000576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800057a:	40ca      	lsrs	r2, r1
 800057c:	499b      	ldr	r1, [pc, #620]	; (80007ec <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800057e:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000580:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000582:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000584:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000586:	4a9a      	ldr	r2, [pc, #616]	; (80007f0 <HAL_RCC_OscConfig+0x328>)
 8000588:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800058a:	f7ff fdf7 	bl	800017c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800058e:	6823      	ldr	r3, [r4, #0]
 8000590:	071d      	lsls	r5, r3, #28
 8000592:	f100 8191 	bmi.w	80008b8 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000596:	6823      	ldr	r3, [r4, #0]
 8000598:	0758      	lsls	r0, r3, #29
 800059a:	f100 81d3 	bmi.w	8000944 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800059e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80005a0:	2a00      	cmp	r2, #0
 80005a2:	f040 8257 	bne.w	8000a54 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 80005a6:	2000      	movs	r0, #0
 80005a8:	e024      	b.n	80005f4 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005aa:	4b8f      	ldr	r3, [pc, #572]	; (80007e8 <HAL_RCC_OscConfig+0x320>)
 80005ac:	689a      	ldr	r2, [r3, #8]
 80005ae:	f002 020c 	and.w	r2, r2, #12
 80005b2:	2a08      	cmp	r2, #8
 80005b4:	d007      	beq.n	80005c6 <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005b6:	689a      	ldr	r2, [r3, #8]
 80005b8:	f002 020c 	and.w	r2, r2, #12
 80005bc:	2a0c      	cmp	r2, #12
 80005be:	d11c      	bne.n	80005fa <HAL_RCC_OscConfig+0x132>
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	03db      	lsls	r3, r3, #15
 80005c4:	d519      	bpl.n	80005fa <HAL_RCC_OscConfig+0x132>
 80005c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005ca:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005ce:	4a86      	ldr	r2, [pc, #536]	; (80007e8 <HAL_RCC_OscConfig+0x320>)
 80005d0:	6811      	ldr	r1, [r2, #0]
 80005d2:	fa93 f3a3 	rbit	r3, r3
 80005d6:	fab3 f383 	clz	r3, r3
 80005da:	2201      	movs	r2, #1
 80005dc:	f003 031f 	and.w	r3, r3, #31
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	420b      	tst	r3, r1
 80005e6:	f43f af75 	beq.w	80004d4 <HAL_RCC_OscConfig+0xc>
 80005ea:	6863      	ldr	r3, [r4, #4]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	f47f af71 	bne.w	80004d4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005f2:	2001      	movs	r0, #1
}
 80005f4:	b003      	add	sp, #12
 80005f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005fa:	6863      	ldr	r3, [r4, #4]
 80005fc:	4d7a      	ldr	r5, [pc, #488]	; (80007e8 <HAL_RCC_OscConfig+0x320>)
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d120      	bne.n	8000644 <HAL_RCC_OscConfig+0x17c>
 8000602:	682b      	ldr	r3, [r5, #0]
 8000604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000608:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800060a:	f7ff fddf 	bl	80001cc <HAL_GetTick>
 800060e:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000612:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000614:	2601      	movs	r6, #1
 8000616:	4f74      	ldr	r7, [pc, #464]	; (80007e8 <HAL_RCC_OscConfig+0x320>)
 8000618:	fa95 f3a5 	rbit	r3, r5
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	fa95 f3a5 	rbit	r3, r5
 8000622:	fab3 f383 	clz	r3, r3
 8000626:	f003 031f 	and.w	r3, r3, #31
 800062a:	fa06 f303 	lsl.w	r3, r6, r3
 800062e:	4213      	tst	r3, r2
 8000630:	f47f af50 	bne.w	80004d4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000634:	f7ff fdca 	bl	80001cc <HAL_GetTick>
 8000638:	eba0 0008 	sub.w	r0, r0, r8
 800063c:	2864      	cmp	r0, #100	; 0x64
 800063e:	d9eb      	bls.n	8000618 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8000640:	2003      	movs	r0, #3
 8000642:	e7d7      	b.n	80005f4 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000644:	bb13      	cbnz	r3, 800068c <HAL_RCC_OscConfig+0x1c4>
 8000646:	682b      	ldr	r3, [r5, #0]
 8000648:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800064c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000650:	602b      	str	r3, [r5, #0]
 8000652:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000654:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800065a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800065c:	f7ff fdb6 	bl	80001cc <HAL_GetTick>
 8000660:	4680      	mov	r8, r0
 8000662:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000666:	682a      	ldr	r2, [r5, #0]
 8000668:	fa96 f3a6 	rbit	r3, r6
 800066c:	fab3 f383 	clz	r3, r3
 8000670:	f003 031f 	and.w	r3, r3, #31
 8000674:	fa07 f303 	lsl.w	r3, r7, r3
 8000678:	4213      	tst	r3, r2
 800067a:	f43f af2b 	beq.w	80004d4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800067e:	f7ff fda5 	bl	80001cc <HAL_GetTick>
 8000682:	eba0 0008 	sub.w	r0, r0, r8
 8000686:	2864      	cmp	r0, #100	; 0x64
 8000688:	d9eb      	bls.n	8000662 <HAL_RCC_OscConfig+0x19a>
 800068a:	e7d9      	b.n	8000640 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800068c:	2b05      	cmp	r3, #5
 800068e:	682b      	ldr	r3, [r5, #0]
 8000690:	d103      	bne.n	800069a <HAL_RCC_OscConfig+0x1d2>
 8000692:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000696:	602b      	str	r3, [r5, #0]
 8000698:	e7b3      	b.n	8000602 <HAL_RCC_OscConfig+0x13a>
 800069a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800069e:	602b      	str	r3, [r5, #0]
 80006a0:	682b      	ldr	r3, [r5, #0]
 80006a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a6:	e7af      	b.n	8000608 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006a8:	4b4f      	ldr	r3, [pc, #316]	; (80007e8 <HAL_RCC_OscConfig+0x320>)
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	f002 020c 	and.w	r2, r2, #12
 80006b0:	2a04      	cmp	r2, #4
 80006b2:	d007      	beq.n	80006c4 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	f002 020c 	and.w	r2, r2, #12
 80006ba:	2a0c      	cmp	r2, #12
 80006bc:	d124      	bne.n	8000708 <HAL_RCC_OscConfig+0x240>
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	03df      	lsls	r7, r3, #15
 80006c2:	d421      	bmi.n	8000708 <HAL_RCC_OscConfig+0x240>
 80006c4:	2302      	movs	r3, #2
 80006c6:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006ca:	4a47      	ldr	r2, [pc, #284]	; (80007e8 <HAL_RCC_OscConfig+0x320>)
 80006cc:	6810      	ldr	r0, [r2, #0]
 80006ce:	fa93 f3a3 	rbit	r3, r3
 80006d2:	fab3 f383 	clz	r3, r3
 80006d6:	2101      	movs	r1, #1
 80006d8:	f003 031f 	and.w	r3, r3, #31
 80006dc:	fa01 f303 	lsl.w	r3, r1, r3
 80006e0:	4203      	tst	r3, r0
 80006e2:	4613      	mov	r3, r2
 80006e4:	d002      	beq.n	80006ec <HAL_RCC_OscConfig+0x224>
 80006e6:	68e2      	ldr	r2, [r4, #12]
 80006e8:	428a      	cmp	r2, r1
 80006ea:	d182      	bne.n	80005f2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006ec:	6858      	ldr	r0, [r3, #4]
 80006ee:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 80006f2:	fa92 f2a2 	rbit	r2, r2
 80006f6:	fab2 f182 	clz	r1, r2
 80006fa:	6922      	ldr	r2, [r4, #16]
 80006fc:	408a      	lsls	r2, r1
 80006fe:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 8000702:	430a      	orrs	r2, r1
 8000704:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000706:	e6e9      	b.n	80004dc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000708:	68e2      	ldr	r2, [r4, #12]
 800070a:	2501      	movs	r5, #1
 800070c:	b382      	cbz	r2, 8000770 <HAL_RCC_OscConfig+0x2a8>
 800070e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000712:	fab3 f383 	clz	r3, r3
 8000716:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800071a:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000722:	f7ff fd53 	bl	80001cc <HAL_GetTick>
 8000726:	2702      	movs	r7, #2
 8000728:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800072a:	4e2f      	ldr	r6, [pc, #188]	; (80007e8 <HAL_RCC_OscConfig+0x320>)
 800072c:	fa97 f3a7 	rbit	r3, r7
 8000730:	6832      	ldr	r2, [r6, #0]
 8000732:	fa97 f3a7 	rbit	r3, r7
 8000736:	fab3 f383 	clz	r3, r3
 800073a:	f003 031f 	and.w	r3, r3, #31
 800073e:	fa05 f303 	lsl.w	r3, r5, r3
 8000742:	4213      	tst	r3, r2
 8000744:	d00d      	beq.n	8000762 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000746:	6871      	ldr	r1, [r6, #4]
 8000748:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800074c:	fa93 f3a3 	rbit	r3, r3
 8000750:	fab3 f283 	clz	r2, r3
 8000754:	6923      	ldr	r3, [r4, #16]
 8000756:	4093      	lsls	r3, r2
 8000758:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 800075c:	4313      	orrs	r3, r2
 800075e:	6073      	str	r3, [r6, #4]
 8000760:	e6bc      	b.n	80004dc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000762:	f7ff fd33 	bl	80001cc <HAL_GetTick>
 8000766:	eba0 0008 	sub.w	r0, r0, r8
 800076a:	2802      	cmp	r0, #2
 800076c:	d9de      	bls.n	800072c <HAL_RCC_OscConfig+0x264>
 800076e:	e767      	b.n	8000640 <HAL_RCC_OscConfig+0x178>
 8000770:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000774:	fab3 f383 	clz	r3, r3
 8000778:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800077c:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000784:	f7ff fd22 	bl	80001cc <HAL_GetTick>
 8000788:	2602      	movs	r6, #2
 800078a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800078c:	4f16      	ldr	r7, [pc, #88]	; (80007e8 <HAL_RCC_OscConfig+0x320>)
 800078e:	fa96 f3a6 	rbit	r3, r6
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	fa96 f3a6 	rbit	r3, r6
 8000798:	fab3 f383 	clz	r3, r3
 800079c:	f003 031f 	and.w	r3, r3, #31
 80007a0:	fa05 f303 	lsl.w	r3, r5, r3
 80007a4:	4213      	tst	r3, r2
 80007a6:	f43f ae99 	beq.w	80004dc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007aa:	f7ff fd0f 	bl	80001cc <HAL_GetTick>
 80007ae:	eba0 0008 	sub.w	r0, r0, r8
 80007b2:	2802      	cmp	r0, #2
 80007b4:	d9eb      	bls.n	800078e <HAL_RCC_OscConfig+0x2c6>
 80007b6:	e743      	b.n	8000640 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007b8:	686b      	ldr	r3, [r5, #4]
 80007ba:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80007be:	4303      	orrs	r3, r0
 80007c0:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80007c2:	6869      	ldr	r1, [r5, #4]
 80007c4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80007c8:	fa93 f3a3 	rbit	r3, r3
 80007cc:	fab3 f283 	clz	r2, r3
 80007d0:	69e3      	ldr	r3, [r4, #28]
 80007d2:	4093      	lsls	r3, r2
 80007d4:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80007d8:	4313      	orrs	r3, r2
 80007da:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80007dc:	f7ff fe34 	bl	8000448 <RCC_SetFlashLatencyFromMSIRange>
 80007e0:	2800      	cmp	r0, #0
 80007e2:	f43f aeb6 	beq.w	8000552 <HAL_RCC_OscConfig+0x8a>
 80007e6:	e704      	b.n	80005f2 <HAL_RCC_OscConfig+0x12a>
 80007e8:	40023800 	.word	0x40023800
 80007ec:	080013c0 	.word	0x080013c0
 80007f0:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80007f4:	69a2      	ldr	r2, [r4, #24]
 80007f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d037      	beq.n	800086e <HAL_RCC_OscConfig+0x3a6>
 80007fe:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 8000802:	fab3 f383 	clz	r3, r3
 8000806:	2601      	movs	r6, #1
 8000808:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800080c:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000814:	f7ff fcda 	bl	80001cc <HAL_GetTick>
 8000818:	f44f 7700 	mov.w	r7, #512	; 0x200
 800081c:	4680      	mov	r8, r0
 800081e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000822:	682a      	ldr	r2, [r5, #0]
 8000824:	fa97 f3a7 	rbit	r3, r7
 8000828:	fab3 f383 	clz	r3, r3
 800082c:	f003 031f 	and.w	r3, r3, #31
 8000830:	fa06 f303 	lsl.w	r3, r6, r3
 8000834:	4213      	tst	r3, r2
 8000836:	d013      	beq.n	8000860 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000838:	686b      	ldr	r3, [r5, #4]
 800083a:	6a22      	ldr	r2, [r4, #32]
 800083c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000840:	4313      	orrs	r3, r2
 8000842:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000844:	6869      	ldr	r1, [r5, #4]
 8000846:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800084a:	fa93 f3a3 	rbit	r3, r3
 800084e:	fab3 f283 	clz	r2, r3
 8000852:	69e3      	ldr	r3, [r4, #28]
 8000854:	4093      	lsls	r3, r2
 8000856:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800085a:	4313      	orrs	r3, r2
 800085c:	606b      	str	r3, [r5, #4]
 800085e:	e696      	b.n	800058e <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000860:	f7ff fcb4 	bl	80001cc <HAL_GetTick>
 8000864:	eba0 0008 	sub.w	r0, r0, r8
 8000868:	2802      	cmp	r0, #2
 800086a:	d9d8      	bls.n	800081e <HAL_RCC_OscConfig+0x356>
 800086c:	e6e8      	b.n	8000640 <HAL_RCC_OscConfig+0x178>
 800086e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 8000872:	fab3 f383 	clz	r3, r3
 8000876:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800087a:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000882:	f7ff fca3 	bl	80001cc <HAL_GetTick>
 8000886:	f44f 7600 	mov.w	r6, #512	; 0x200
 800088a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 800088c:	2701      	movs	r7, #1
 800088e:	fa96 f3a6 	rbit	r3, r6
 8000892:	682a      	ldr	r2, [r5, #0]
 8000894:	fa96 f3a6 	rbit	r3, r6
 8000898:	fab3 f383 	clz	r3, r3
 800089c:	f003 031f 	and.w	r3, r3, #31
 80008a0:	fa07 f303 	lsl.w	r3, r7, r3
 80008a4:	4213      	tst	r3, r2
 80008a6:	f43f ae72 	beq.w	800058e <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80008aa:	f7ff fc8f 	bl	80001cc <HAL_GetTick>
 80008ae:	eba0 0008 	sub.w	r0, r0, r8
 80008b2:	2802      	cmp	r0, #2
 80008b4:	d9eb      	bls.n	800088e <HAL_RCC_OscConfig+0x3c6>
 80008b6:	e6c3      	b.n	8000640 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008b8:	6962      	ldr	r2, [r4, #20]
 80008ba:	2501      	movs	r5, #1
 80008bc:	49a9      	ldr	r1, [pc, #676]	; (8000b64 <HAL_RCC_OscConfig+0x69c>)
 80008be:	b302      	cbz	r2, 8000902 <HAL_RCC_OscConfig+0x43a>
 80008c0:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 80008c4:	fab3 f383 	clz	r3, r3
 80008c8:	440b      	add	r3, r1
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 80008ce:	f7ff fc7d 	bl	80001cc <HAL_GetTick>
 80008d2:	2602      	movs	r6, #2
 80008d4:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008d6:	4fa4      	ldr	r7, [pc, #656]	; (8000b68 <HAL_RCC_OscConfig+0x6a0>)
 80008d8:	fa96 f3a6 	rbit	r3, r6
 80008dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008de:	fa96 f3a6 	rbit	r3, r6
 80008e2:	fab3 f383 	clz	r3, r3
 80008e6:	f003 031f 	and.w	r3, r3, #31
 80008ea:	fa05 f303 	lsl.w	r3, r5, r3
 80008ee:	4213      	tst	r3, r2
 80008f0:	f47f ae51 	bne.w	8000596 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008f4:	f7ff fc6a 	bl	80001cc <HAL_GetTick>
 80008f8:	eba0 0008 	sub.w	r0, r0, r8
 80008fc:	2802      	cmp	r0, #2
 80008fe:	d9eb      	bls.n	80008d8 <HAL_RCC_OscConfig+0x410>
 8000900:	e69e      	b.n	8000640 <HAL_RCC_OscConfig+0x178>
 8000902:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 8000906:	fab3 f383 	clz	r3, r3
 800090a:	440b      	add	r3, r1
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000910:	f7ff fc5c 	bl	80001cc <HAL_GetTick>
 8000914:	2602      	movs	r6, #2
 8000916:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000918:	4f93      	ldr	r7, [pc, #588]	; (8000b68 <HAL_RCC_OscConfig+0x6a0>)
 800091a:	fa96 f3a6 	rbit	r3, r6
 800091e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000920:	fa96 f3a6 	rbit	r3, r6
 8000924:	fab3 f383 	clz	r3, r3
 8000928:	f003 031f 	and.w	r3, r3, #31
 800092c:	fa05 f303 	lsl.w	r3, r5, r3
 8000930:	4213      	tst	r3, r2
 8000932:	f43f ae30 	beq.w	8000596 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000936:	f7ff fc49 	bl	80001cc <HAL_GetTick>
 800093a:	eba0 0008 	sub.w	r0, r0, r8
 800093e:	2802      	cmp	r0, #2
 8000940:	d9eb      	bls.n	800091a <HAL_RCC_OscConfig+0x452>
 8000942:	e67d      	b.n	8000640 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000944:	4b88      	ldr	r3, [pc, #544]	; (8000b68 <HAL_RCC_OscConfig+0x6a0>)
 8000946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000948:	00d1      	lsls	r1, r2, #3
 800094a:	d434      	bmi.n	80009b6 <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 800094c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000950:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
 8000956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000960:	4d82      	ldr	r5, [pc, #520]	; (8000b6c <HAL_RCC_OscConfig+0x6a4>)
 8000962:	682b      	ldr	r3, [r5, #0]
 8000964:	05da      	lsls	r2, r3, #23
 8000966:	d528      	bpl.n	80009ba <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000968:	68a3      	ldr	r3, [r4, #8]
 800096a:	4d7f      	ldr	r5, [pc, #508]	; (8000b68 <HAL_RCC_OscConfig+0x6a0>)
 800096c:	2b01      	cmp	r3, #1
 800096e:	d134      	bne.n	80009da <HAL_RCC_OscConfig+0x512>
 8000970:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000976:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000978:	f7ff fc28 	bl	80001cc <HAL_GetTick>
 800097c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8000980:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000982:	2701      	movs	r7, #1
 8000984:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8000b68 <HAL_RCC_OscConfig+0x6a0>
 8000988:	fa95 f3a5 	rbit	r3, r5
 800098c:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8000990:	fa95 f3a5 	rbit	r3, r5
 8000994:	fab3 f383 	clz	r3, r3
 8000998:	f003 031f 	and.w	r3, r3, #31
 800099c:	fa07 f303 	lsl.w	r3, r7, r3
 80009a0:	4213      	tst	r3, r2
 80009a2:	d04e      	beq.n	8000a42 <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	f43f adfa 	beq.w	800059e <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009aa:	4a6f      	ldr	r2, [pc, #444]	; (8000b68 <HAL_RCC_OscConfig+0x6a0>)
 80009ac:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80009ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009b2:	6253      	str	r3, [r2, #36]	; 0x24
 80009b4:	e5f3      	b.n	800059e <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 80009b6:	2600      	movs	r6, #0
 80009b8:	e7d2      	b.n	8000960 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009ba:	682b      	ldr	r3, [r5, #0]
 80009bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80009c2:	f7ff fc03 	bl	80001cc <HAL_GetTick>
 80009c6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009c8:	682b      	ldr	r3, [r5, #0]
 80009ca:	05db      	lsls	r3, r3, #23
 80009cc:	d4cc      	bmi.n	8000968 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009ce:	f7ff fbfd 	bl	80001cc <HAL_GetTick>
 80009d2:	1bc0      	subs	r0, r0, r7
 80009d4:	2864      	cmp	r0, #100	; 0x64
 80009d6:	d9f7      	bls.n	80009c8 <HAL_RCC_OscConfig+0x500>
 80009d8:	e632      	b.n	8000640 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009da:	bb23      	cbnz	r3, 8000a26 <HAL_RCC_OscConfig+0x55e>
 80009dc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80009de:	f44f 7700 	mov.w	r7, #512	; 0x200
 80009e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009e6:	636b      	str	r3, [r5, #52]	; 0x34
 80009e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009ea:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009f2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80009f4:	f7ff fbea 	bl	80001cc <HAL_GetTick>
 80009f8:	4681      	mov	r9, r0
 80009fa:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009fe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000a00:	fa97 f3a7 	rbit	r3, r7
 8000a04:	fab3 f383 	clz	r3, r3
 8000a08:	f003 031f 	and.w	r3, r3, #31
 8000a0c:	fa08 f303 	lsl.w	r3, r8, r3
 8000a10:	4213      	tst	r3, r2
 8000a12:	d0c7      	beq.n	80009a4 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a14:	f7ff fbda 	bl	80001cc <HAL_GetTick>
 8000a18:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a1c:	eba0 0009 	sub.w	r0, r0, r9
 8000a20:	4298      	cmp	r0, r3
 8000a22:	d9ea      	bls.n	80009fa <HAL_RCC_OscConfig+0x532>
 8000a24:	e60c      	b.n	8000640 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a26:	2b05      	cmp	r3, #5
 8000a28:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a2a:	d103      	bne.n	8000a34 <HAL_RCC_OscConfig+0x56c>
 8000a2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a30:	636b      	str	r3, [r5, #52]	; 0x34
 8000a32:	e79d      	b.n	8000970 <HAL_RCC_OscConfig+0x4a8>
 8000a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a38:	636b      	str	r3, [r5, #52]	; 0x34
 8000a3a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a40:	e799      	b.n	8000976 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a42:	f7ff fbc3 	bl	80001cc <HAL_GetTick>
 8000a46:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a4a:	eba0 0009 	sub.w	r0, r0, r9
 8000a4e:	4298      	cmp	r0, r3
 8000a50:	d99a      	bls.n	8000988 <HAL_RCC_OscConfig+0x4c0>
 8000a52:	e5f5      	b.n	8000640 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a54:	4d44      	ldr	r5, [pc, #272]	; (8000b68 <HAL_RCC_OscConfig+0x6a0>)
 8000a56:	68ab      	ldr	r3, [r5, #8]
 8000a58:	f003 030c 	and.w	r3, r3, #12
 8000a5c:	2b0c      	cmp	r3, #12
 8000a5e:	f43f adc8 	beq.w	80005f2 <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a62:	2a02      	cmp	r2, #2
 8000a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a68:	d156      	bne.n	8000b18 <HAL_RCC_OscConfig+0x650>
 8000a6a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a6e:	fab3 f383 	clz	r3, r3
 8000a72:	2200      	movs	r2, #0
 8000a74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a78:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a80:	f7ff fba4 	bl	80001cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a84:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8000a86:	4680      	mov	r8, r0
 8000a88:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a8c:	2501      	movs	r5, #1
 8000a8e:	fa97 f3a7 	rbit	r3, r7
 8000a92:	6832      	ldr	r2, [r6, #0]
 8000a94:	fa97 f3a7 	rbit	r3, r7
 8000a98:	fab3 f383 	clz	r3, r3
 8000a9c:	f003 031f 	and.w	r3, r3, #31
 8000aa0:	fa05 f303 	lsl.w	r3, r5, r3
 8000aa4:	4213      	tst	r3, r2
 8000aa6:	d130      	bne.n	8000b0a <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000aa8:	68b2      	ldr	r2, [r6, #8]
 8000aaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000aac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000aae:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8000ab2:	430b      	orrs	r3, r1
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	60b3      	str	r3, [r6, #8]
 8000abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ac0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000ac4:	fab3 f383 	clz	r3, r3
 8000ac8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000acc:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000ad4:	f7ff fb7a 	bl	80001cc <HAL_GetTick>
 8000ad8:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000adc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ade:	2501      	movs	r5, #1
 8000ae0:	4e21      	ldr	r6, [pc, #132]	; (8000b68 <HAL_RCC_OscConfig+0x6a0>)
 8000ae2:	fa94 f3a4 	rbit	r3, r4
 8000ae6:	6832      	ldr	r2, [r6, #0]
 8000ae8:	fa94 f3a4 	rbit	r3, r4
 8000aec:	fab3 f383 	clz	r3, r3
 8000af0:	f003 031f 	and.w	r3, r3, #31
 8000af4:	fa05 f303 	lsl.w	r3, r5, r3
 8000af8:	4213      	tst	r3, r2
 8000afa:	f47f ad54 	bne.w	80005a6 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000afe:	f7ff fb65 	bl	80001cc <HAL_GetTick>
 8000b02:	1bc0      	subs	r0, r0, r7
 8000b04:	2802      	cmp	r0, #2
 8000b06:	d9ec      	bls.n	8000ae2 <HAL_RCC_OscConfig+0x61a>
 8000b08:	e59a      	b.n	8000640 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b0a:	f7ff fb5f 	bl	80001cc <HAL_GetTick>
 8000b0e:	eba0 0008 	sub.w	r0, r0, r8
 8000b12:	2802      	cmp	r0, #2
 8000b14:	d9bb      	bls.n	8000a8e <HAL_RCC_OscConfig+0x5c6>
 8000b16:	e593      	b.n	8000640 <HAL_RCC_OscConfig+0x178>
 8000b18:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000b1c:	fab3 f383 	clz	r3, r3
 8000b20:	2200      	movs	r2, #0
 8000b22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b26:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b2e:	f7ff fb4d 	bl	80001cc <HAL_GetTick>
 8000b32:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000b36:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b38:	2601      	movs	r6, #1
 8000b3a:	fa94 f3a4 	rbit	r3, r4
 8000b3e:	682a      	ldr	r2, [r5, #0]
 8000b40:	fa94 f3a4 	rbit	r3, r4
 8000b44:	fab3 f383 	clz	r3, r3
 8000b48:	f003 031f 	and.w	r3, r3, #31
 8000b4c:	fa06 f303 	lsl.w	r3, r6, r3
 8000b50:	4213      	tst	r3, r2
 8000b52:	f43f ad28 	beq.w	80005a6 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b56:	f7ff fb39 	bl	80001cc <HAL_GetTick>
 8000b5a:	1bc0      	subs	r0, r0, r7
 8000b5c:	2802      	cmp	r0, #2
 8000b5e:	d9ec      	bls.n	8000b3a <HAL_RCC_OscConfig+0x672>
 8000b60:	e56e      	b.n	8000640 <HAL_RCC_OscConfig+0x178>
 8000b62:	bf00      	nop
 8000b64:	1091c1a0 	.word	0x1091c1a0
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40007000 	.word	0x40007000

08000b70 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000b70:	491e      	ldr	r1, [pc, #120]	; (8000bec <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8000b72:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000b74:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8000b76:	f003 020c 	and.w	r2, r3, #12
 8000b7a:	2a08      	cmp	r2, #8
 8000b7c:	d005      	beq.n	8000b8a <HAL_RCC_GetSysClockFreq+0x1a>
 8000b7e:	2a0c      	cmp	r2, #12
 8000b80:	d005      	beq.n	8000b8e <HAL_RCC_GetSysClockFreq+0x1e>
 8000b82:	2a04      	cmp	r2, #4
 8000b84:	d122      	bne.n	8000bcc <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8000b86:	481a      	ldr	r0, [pc, #104]	; (8000bf0 <HAL_RCC_GetSysClockFreq+0x80>)
}
 8000b88:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000b8a:	481a      	ldr	r0, [pc, #104]	; (8000bf4 <HAL_RCC_GetSysClockFreq+0x84>)
 8000b8c:	bd10      	pop	{r4, pc}
 8000b8e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000b92:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8000b9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba2:	4815      	ldr	r0, [pc, #84]	; (8000bf8 <HAL_RCC_GetSysClockFreq+0x88>)
 8000ba4:	5c84      	ldrb	r4, [r0, r2]
 8000ba6:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8000baa:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000bae:	fab0 f280 	clz	r2, r0
 8000bb2:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bb6:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000bb8:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bba:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8000bbc:	bf4c      	ite	mi
 8000bbe:	4b0d      	ldrmi	r3, [pc, #52]	; (8000bf4 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8000bc0:	4b0b      	ldrpl	r3, [pc, #44]	; (8000bf0 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000bc2:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8000bc4:	4363      	muls	r3, r4
 8000bc6:	fbb3 f0f0 	udiv	r0, r3, r0
 8000bca:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000bcc:	6848      	ldr	r0, [r1, #4]
 8000bce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000bd2:	fa93 f3a3 	rbit	r3, r3
 8000bd6:	fab3 f383 	clz	r3, r3
 8000bda:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8000bde:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8000be0:	1c43      	adds	r3, r0, #1
 8000be2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000be6:	4098      	lsls	r0, r3
 8000be8:	bd10      	pop	{r4, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	00f42400 	.word	0x00f42400
 8000bf4:	007a1200 	.word	0x007a1200
 8000bf8:	080013d8 	.word	0x080013d8

08000bfc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bfc:	4b6a      	ldr	r3, [pc, #424]	; (8000da8 <HAL_RCC_ClockConfig+0x1ac>)
{
 8000bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c02:	681a      	ldr	r2, [r3, #0]
{
 8000c04:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c06:	f002 0201 	and.w	r2, r2, #1
 8000c0a:	428a      	cmp	r2, r1
{
 8000c0c:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c0e:	d330      	bcc.n	8000c72 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c10:	6832      	ldr	r2, [r6, #0]
 8000c12:	0794      	lsls	r4, r2, #30
 8000c14:	d440      	bmi.n	8000c98 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c16:	07d0      	lsls	r0, r2, #31
 8000c18:	d446      	bmi.n	8000ca8 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c1a:	4b63      	ldr	r3, [pc, #396]	; (8000da8 <HAL_RCC_ClockConfig+0x1ac>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	f002 0201 	and.w	r2, r2, #1
 8000c22:	4295      	cmp	r5, r2
 8000c24:	f0c0 80ae 	bcc.w	8000d84 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c28:	6832      	ldr	r2, [r6, #0]
 8000c2a:	0751      	lsls	r1, r2, #29
 8000c2c:	f100 80b3 	bmi.w	8000d96 <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c30:	0713      	lsls	r3, r2, #28
 8000c32:	d507      	bpl.n	8000c44 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c34:	4a5d      	ldr	r2, [pc, #372]	; (8000dac <HAL_RCC_ClockConfig+0x1b0>)
 8000c36:	6931      	ldr	r1, [r6, #16]
 8000c38:	6893      	ldr	r3, [r2, #8]
 8000c3a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c42:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000c44:	f7ff ff94 	bl	8000b70 <HAL_RCC_GetSysClockFreq>
 8000c48:	4b58      	ldr	r3, [pc, #352]	; (8000dac <HAL_RCC_ClockConfig+0x1b0>)
 8000c4a:	22f0      	movs	r2, #240	; 0xf0
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	fa92 f2a2 	rbit	r2, r2
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c5a:	40d3      	lsrs	r3, r2
 8000c5c:	4a54      	ldr	r2, [pc, #336]	; (8000db0 <HAL_RCC_ClockConfig+0x1b4>)
 8000c5e:	5cd3      	ldrb	r3, [r2, r3]
 8000c60:	40d8      	lsrs	r0, r3
 8000c62:	4b54      	ldr	r3, [pc, #336]	; (8000db4 <HAL_RCC_ClockConfig+0x1b8>)
 8000c64:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff fa88 	bl	800017c <HAL_InitTick>
  return HAL_OK;
 8000c6c:	2000      	movs	r0, #0
}
 8000c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c72:	2901      	cmp	r1, #1
 8000c74:	bf02      	ittt	eq
 8000c76:	681a      	ldreq	r2, [r3, #0]
 8000c78:	f042 0204 	orreq.w	r2, r2, #4
 8000c7c:	601a      	streq	r2, [r3, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	f022 0201 	bic.w	r2, r2, #1
 8000c84:	430a      	orrs	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	d0be      	beq.n	8000c10 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000c92:	2001      	movs	r0, #1
 8000c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c98:	4944      	ldr	r1, [pc, #272]	; (8000dac <HAL_RCC_ClockConfig+0x1b0>)
 8000c9a:	68b0      	ldr	r0, [r6, #8]
 8000c9c:	688b      	ldr	r3, [r1, #8]
 8000c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	608b      	str	r3, [r1, #8]
 8000ca6:	e7b6      	b.n	8000c16 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ca8:	6872      	ldr	r2, [r6, #4]
 8000caa:	4940      	ldr	r1, [pc, #256]	; (8000dac <HAL_RCC_ClockConfig+0x1b0>)
 8000cac:	2a02      	cmp	r2, #2
 8000cae:	d10f      	bne.n	8000cd0 <HAL_RCC_ClockConfig+0xd4>
 8000cb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb4:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000cb8:	6808      	ldr	r0, [r1, #0]
 8000cba:	fa93 f3a3 	rbit	r3, r3
 8000cbe:	fab3 f383 	clz	r3, r3
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	f003 031f 	and.w	r3, r3, #31
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	4203      	tst	r3, r0
 8000cce:	e013      	b.n	8000cf8 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cd0:	2a03      	cmp	r2, #3
 8000cd2:	d102      	bne.n	8000cda <HAL_RCC_ClockConfig+0xde>
 8000cd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cd8:	e7ec      	b.n	8000cb4 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000cda:	2a01      	cmp	r2, #1
 8000cdc:	d129      	bne.n	8000d32 <HAL_RCC_ClockConfig+0x136>
 8000cde:	2302      	movs	r3, #2
 8000ce0:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce4:	6809      	ldr	r1, [r1, #0]
 8000ce6:	fa93 f3a3 	rbit	r3, r3
 8000cea:	fab3 f383 	clz	r3, r3
 8000cee:	f003 031f 	and.w	r3, r3, #31
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000cf8:	d0cb      	beq.n	8000c92 <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cfa:	4c2c      	ldr	r4, [pc, #176]	; (8000dac <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cfc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d00:	68a3      	ldr	r3, [r4, #8]
 8000d02:	f023 0303 	bic.w	r3, r3, #3
 8000d06:	431a      	orrs	r2, r3
 8000d08:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8000d0a:	f7ff fa5f 	bl	80001cc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d0e:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d10:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d110      	bne.n	8000d38 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d16:	68a3      	ldr	r3, [r4, #8]
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b08      	cmp	r3, #8
 8000d1e:	f43f af7c 	beq.w	8000c1a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d22:	f7ff fa53 	bl	80001cc <HAL_GetTick>
 8000d26:	1bc0      	subs	r0, r0, r7
 8000d28:	4540      	cmp	r0, r8
 8000d2a:	d9f4      	bls.n	8000d16 <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d36:	e7bd      	b.n	8000cb4 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d10b      	bne.n	8000d54 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d3c:	68a3      	ldr	r3, [r4, #8]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	2b0c      	cmp	r3, #12
 8000d44:	f43f af69 	beq.w	8000c1a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d48:	f7ff fa40 	bl	80001cc <HAL_GetTick>
 8000d4c:	1bc0      	subs	r0, r0, r7
 8000d4e:	4540      	cmp	r0, r8
 8000d50:	d9f4      	bls.n	8000d3c <HAL_RCC_ClockConfig+0x140>
 8000d52:	e7eb      	b.n	8000d2c <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d110      	bne.n	8000d7a <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d58:	68a3      	ldr	r3, [r4, #8]
 8000d5a:	f003 030c 	and.w	r3, r3, #12
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	f43f af5b 	beq.w	8000c1a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d64:	f7ff fa32 	bl	80001cc <HAL_GetTick>
 8000d68:	1bc0      	subs	r0, r0, r7
 8000d6a:	4540      	cmp	r0, r8
 8000d6c:	d9f4      	bls.n	8000d58 <HAL_RCC_ClockConfig+0x15c>
 8000d6e:	e7dd      	b.n	8000d2c <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d70:	f7ff fa2c 	bl	80001cc <HAL_GetTick>
 8000d74:	1bc0      	subs	r0, r0, r7
 8000d76:	4540      	cmp	r0, r8
 8000d78:	d8d8      	bhi.n	8000d2c <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000d7a:	68a3      	ldr	r3, [r4, #8]
 8000d7c:	f013 0f0c 	tst.w	r3, #12
 8000d80:	d1f6      	bne.n	8000d70 <HAL_RCC_ClockConfig+0x174>
 8000d82:	e74a      	b.n	8000c1a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	f022 0201 	bic.w	r2, r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	07da      	lsls	r2, r3, #31
 8000d90:	f53f af7f 	bmi.w	8000c92 <HAL_RCC_ClockConfig+0x96>
 8000d94:	e748      	b.n	8000c28 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d96:	4905      	ldr	r1, [pc, #20]	; (8000dac <HAL_RCC_ClockConfig+0x1b0>)
 8000d98:	68f0      	ldr	r0, [r6, #12]
 8000d9a:	688b      	ldr	r3, [r1, #8]
 8000d9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000da0:	4303      	orrs	r3, r0
 8000da2:	608b      	str	r3, [r1, #8]
 8000da4:	e744      	b.n	8000c30 <HAL_RCC_ClockConfig+0x34>
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00
 8000dac:	40023800 	.word	0x40023800
 8000db0:	080013c0 	.word	0x080013c0
 8000db4:	20000000 	.word	0x20000000

08000db8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8000dba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	fa92 f2a2 	rbit	r2, r2
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000dcc:	40d3      	lsrs	r3, r2
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000dd0:	5cd3      	ldrb	r3, [r2, r3]
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000dd4:	6810      	ldr	r0, [r2, #0]
}    
 8000dd6:	40d8      	lsrs	r0, r3
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	080013d0 	.word	0x080013d0
 8000de4:	20000000 	.word	0x20000000

08000de8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000dea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	fa92 f2a2 	rbit	r2, r2
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000dfc:	40d3      	lsrs	r3, r2
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000e00:	5cd3      	ldrb	r3, [r2, r3]
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000e04:	6810      	ldr	r0, [r2, #0]
} 
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	080013d0 	.word	0x080013d0
 8000e14:	20000000 	.word	0x20000000

08000e18 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e1c:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e1e:	6805      	ldr	r5, [r0, #0]
 8000e20:	68c2      	ldr	r2, [r0, #12]
 8000e22:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e24:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e2e:	6883      	ldr	r3, [r0, #8]
 8000e30:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8000e32:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e34:	4303      	orrs	r3, r0
 8000e36:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000e3a:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e3e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8000e40:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e44:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000e46:	4313      	orrs	r3, r2
 8000e48:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e4a:	696b      	ldr	r3, [r5, #20]
 8000e4c:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8000e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e54:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e56:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e5a:	616b      	str	r3, [r5, #20]
 8000e5c:	4b7e      	ldr	r3, [pc, #504]	; (8001058 <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e5e:	d17f      	bne.n	8000f60 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8000e60:	429d      	cmp	r5, r3
 8000e62:	f04f 0419 	mov.w	r4, #25
 8000e66:	d147      	bne.n	8000ef8 <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000e68:	f7ff ffbe 	bl	8000de8 <HAL_RCC_GetPCLK2Freq>
 8000e6c:	fb04 f300 	mul.w	r3, r4, r0
 8000e70:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000e74:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000e78:	007f      	lsls	r7, r7, #1
 8000e7a:	fbb3 f3f7 	udiv	r3, r3, r7
 8000e7e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000e82:	011f      	lsls	r7, r3, #4
 8000e84:	f7ff ffb0 	bl	8000de8 <HAL_RCC_GetPCLK2Freq>
 8000e88:	4360      	muls	r0, r4
 8000e8a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fbb0 f6f3 	udiv	r6, r0, r3
 8000e94:	f7ff ffa8 	bl	8000de8 <HAL_RCC_GetPCLK2Freq>
 8000e98:	4360      	muls	r0, r4
 8000e9a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ea4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ea8:	fb08 6313 	mls	r3, r8, r3, r6
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	3332      	adds	r3, #50	; 0x32
 8000eb0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8000eba:	f7ff ff95 	bl	8000de8 <HAL_RCC_GetPCLK2Freq>
 8000ebe:	4360      	muls	r0, r4
 8000ec0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000ec4:	0052      	lsls	r2, r2, #1
 8000ec6:	fbb0 faf2 	udiv	sl, r0, r2
 8000eca:	f7ff ff8d 	bl	8000de8 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000ece:	4360      	muls	r0, r4
 8000ed0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eda:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ede:	fb08 a313 	mls	r3, r8, r3, sl
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	3332      	adds	r3, #50	; 0x32
 8000ee6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000ef0:	4433      	add	r3, r6
 8000ef2:	60ab      	str	r3, [r5, #8]
 8000ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000ef8:	f7ff ff5e 	bl	8000db8 <HAL_RCC_GetPCLK1Freq>
 8000efc:	fb04 f300 	mul.w	r3, r4, r0
 8000f00:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000f04:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000f08:	007f      	lsls	r7, r7, #1
 8000f0a:	fbb3 f3f7 	udiv	r3, r3, r7
 8000f0e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f12:	011f      	lsls	r7, r3, #4
 8000f14:	f7ff ff50 	bl	8000db8 <HAL_RCC_GetPCLK1Freq>
 8000f18:	4360      	muls	r0, r4
 8000f1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fbb0 f6f3 	udiv	r6, r0, r3
 8000f24:	f7ff ff48 	bl	8000db8 <HAL_RCC_GetPCLK1Freq>
 8000f28:	4360      	muls	r0, r4
 8000f2a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f34:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f38:	fb08 6313 	mls	r3, r8, r3, r6
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	3332      	adds	r3, #50	; 0x32
 8000f40:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8000f4a:	f7ff ff35 	bl	8000db8 <HAL_RCC_GetPCLK1Freq>
 8000f4e:	4360      	muls	r0, r4
 8000f50:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000f54:	0052      	lsls	r2, r2, #1
 8000f56:	fbb0 faf2 	udiv	sl, r0, r2
 8000f5a:	f7ff ff2d 	bl	8000db8 <HAL_RCC_GetPCLK1Freq>
 8000f5e:	e7b6      	b.n	8000ece <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 8000f60:	429d      	cmp	r5, r3
 8000f62:	f04f 0419 	mov.w	r4, #25
 8000f66:	d143      	bne.n	8000ff0 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000f68:	f7ff ff3e 	bl	8000de8 <HAL_RCC_GetPCLK2Freq>
 8000f6c:	fb04 f300 	mul.w	r3, r4, r0
 8000f70:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000f74:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000f78:	00b6      	lsls	r6, r6, #2
 8000f7a:	fbb3 f3f6 	udiv	r3, r3, r6
 8000f7e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f82:	011e      	lsls	r6, r3, #4
 8000f84:	f7ff ff30 	bl	8000de8 <HAL_RCC_GetPCLK2Freq>
 8000f88:	4360      	muls	r0, r4
 8000f8a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f94:	f7ff ff28 	bl	8000de8 <HAL_RCC_GetPCLK2Freq>
 8000f98:	4360      	muls	r0, r4
 8000f9a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fa4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fa8:	fb08 7313 	mls	r3, r8, r3, r7
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	3332      	adds	r3, #50	; 0x32
 8000fb0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fb4:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000fb8:	f7ff ff16 	bl	8000de8 <HAL_RCC_GetPCLK2Freq>
 8000fbc:	4360      	muls	r0, r4
 8000fbe:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	fbb0 faf2 	udiv	sl, r0, r2
 8000fc8:	f7ff ff0e 	bl	8000de8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000fcc:	4360      	muls	r0, r4
 8000fce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fd8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fdc:	fb08 a313 	mls	r3, r8, r3, sl
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	3332      	adds	r3, #50	; 0x32
 8000fe4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fe8:	f003 030f 	and.w	r3, r3, #15
 8000fec:	433b      	orrs	r3, r7
 8000fee:	e77f      	b.n	8000ef0 <UART_SetConfig+0xd8>
 8000ff0:	f7ff fee2 	bl	8000db8 <HAL_RCC_GetPCLK1Freq>
 8000ff4:	fb04 f300 	mul.w	r3, r4, r0
 8000ff8:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000ffc:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001000:	00b6      	lsls	r6, r6, #2
 8001002:	fbb3 f3f6 	udiv	r3, r3, r6
 8001006:	fbb3 f3f8 	udiv	r3, r3, r8
 800100a:	011e      	lsls	r6, r3, #4
 800100c:	f7ff fed4 	bl	8000db8 <HAL_RCC_GetPCLK1Freq>
 8001010:	4360      	muls	r0, r4
 8001012:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	fbb0 f7f3 	udiv	r7, r0, r3
 800101c:	f7ff fecc 	bl	8000db8 <HAL_RCC_GetPCLK1Freq>
 8001020:	4360      	muls	r0, r4
 8001022:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	fbb0 f3f3 	udiv	r3, r0, r3
 800102c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001030:	fb08 7313 	mls	r3, r8, r3, r7
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	3332      	adds	r3, #50	; 0x32
 8001038:	fbb3 f3f8 	udiv	r3, r3, r8
 800103c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001040:	f7ff feba 	bl	8000db8 <HAL_RCC_GetPCLK1Freq>
 8001044:	4360      	muls	r0, r4
 8001046:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800104a:	0092      	lsls	r2, r2, #2
 800104c:	fbb0 faf2 	udiv	sl, r0, r2
 8001050:	f7ff feb2 	bl	8000db8 <HAL_RCC_GetPCLK1Freq>
 8001054:	e7ba      	b.n	8000fcc <UART_SetConfig+0x1b4>
 8001056:	bf00      	nop
 8001058:	40013800 	.word	0x40013800

0800105c <HAL_UART_Init>:
{
 800105c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800105e:	4604      	mov	r4, r0
 8001060:	b330      	cbz	r0, 80010b0 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 8001062:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001066:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800106a:	b91b      	cbnz	r3, 8001074 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800106c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001070:	f000 f8e6 	bl	8001240 <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8001074:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8001076:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8001078:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800107c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800107e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001080:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001084:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001086:	f7ff fec7 	bl	8000e18 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800108a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800108c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001096:	695a      	ldr	r2, [r3, #20]
 8001098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800109c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010a4:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 80010a6:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010a8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80010aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80010ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010b0:	2001      	movs	r0, #1
}
 80010b2:	bd10      	pop	{r4, pc}

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b530      	push	{r4, r5, lr}
 80010b6:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b8:	2234      	movs	r2, #52	; 0x34
 80010ba:	2100      	movs	r1, #0
 80010bc:	a805      	add	r0, sp, #20
 80010be:	f000 f96b 	bl	8001398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c2:	2100      	movs	r1, #0
 80010c4:	2214      	movs	r2, #20
 80010c6:	4668      	mov	r0, sp
 80010c8:	f000 f966 	bl	8001398 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <SystemClock_Config+0x64>)
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ce:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d0:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d2:	2501      	movs	r5, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80010d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010dc:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010de:	2302      	movs	r3, #2
 80010e0:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80010e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e8:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80010ea:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80010ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f2:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80010f4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f6:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f8:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	f7ff f9e5 	bl	80004c8 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fe:	220f      	movs	r2, #15
 8001100:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001102:	4629      	mov	r1, r5
 8001104:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001106:	e88d 000c 	stmia.w	sp, {r2, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110e:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001110:	f7ff fd74 	bl	8000bfc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001114:	b013      	add	sp, #76	; 0x4c
 8001116:	bd30      	pop	{r4, r5, pc}
 8001118:	40007000 	.word	0x40007000

0800111c <main>:
{
 800111c:	b500      	push	{lr}
 800111e:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8001120:	f7ff f840 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8001124:	f7ff ffc6 	bl	80010b4 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	2214      	movs	r2, #20
 800112a:	2100      	movs	r1, #0
 800112c:	eb0d 0002 	add.w	r0, sp, r2
 8001130:	f000 f932 	bl	8001398 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <main+0xc0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001136:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001138:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800113a:	4829      	ldr	r0, [pc, #164]	; (80011e0 <main+0xc4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113c:	f042 0204 	orr.w	r2, r2, #4
 8001140:	61da      	str	r2, [r3, #28]
 8001142:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	f002 0204 	and.w	r2, r2, #4
 800114a:	9201      	str	r2, [sp, #4]
 800114c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114e:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001150:	2520      	movs	r5, #32
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001152:	f042 0220 	orr.w	r2, r2, #32
 8001156:	61da      	str	r2, [r3, #28]
 8001158:	69da      	ldr	r2, [r3, #28]
 800115a:	f002 0220 	and.w	r2, r2, #32
 800115e:	9202      	str	r2, [sp, #8]
 8001160:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	69da      	ldr	r2, [r3, #28]
 8001164:	f042 0201 	orr.w	r2, r2, #1
 8001168:	61da      	str	r2, [r3, #28]
 800116a:	69da      	ldr	r2, [r3, #28]
 800116c:	f002 0201 	and.w	r2, r2, #1
 8001170:	9203      	str	r2, [sp, #12]
 8001172:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	69da      	ldr	r2, [r3, #28]
 8001176:	f042 0202 	orr.w	r2, r2, #2
 800117a:	61da      	str	r2, [r3, #28]
 800117c:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	9304      	str	r3, [sp, #16]
 8001186:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001188:	f7ff f954 	bl	8000434 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800118c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001190:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <main+0xc8>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001194:	a905      	add	r1, sp, #20
 8001196:	4814      	ldr	r0, [pc, #80]	; (80011e8 <main+0xcc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001198:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800119c:	f7ff f878 	bl	8000290 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011a2:	a905      	add	r1, sp, #20
 80011a4:	480e      	ldr	r0, [pc, #56]	; (80011e0 <main+0xc4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = LD2_Pin;
 80011a8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f7ff f86f 	bl	8000290 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 80011b2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <main+0xd0>)
  huart2.Init.BaudRate = 115200;
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <main+0xd4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80011bc:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c0:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c2:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011c4:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c6:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c8:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ca:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011cc:	f7ff ff46 	bl	800105c <HAL_UART_Init>
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011d0:	4629      	mov	r1, r5
 80011d2:	4803      	ldr	r0, [pc, #12]	; (80011e0 <main+0xc4>)
 80011d4:	f7ff f933 	bl	800043e <HAL_GPIO_TogglePin>
 80011d8:	e7fe      	b.n	80011d8 <main+0xbc>
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	10110000 	.word	0x10110000
 80011e8:	40020800 	.word	0x40020800
 80011ec:	20000024 	.word	0x20000024
 80011f0:	40004400 	.word	0x40004400

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_MspInit+0x48>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011f8:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 80011fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
 8001202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001204:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001208:	9201      	str	r2, [sp, #4]
 800120a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120c:	6a1a      	ldr	r2, [r3, #32]
 800120e:	f042 0201 	orr.w	r2, r2, #1
 8001212:	621a      	str	r2, [r3, #32]
 8001214:	6a1a      	ldr	r2, [r3, #32]
 8001216:	f002 0201 	and.w	r2, r2, #1
 800121a:	9202      	str	r2, [sp, #8]
 800121c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001220:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	9303      	str	r3, [sp, #12]
 800122e:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001230:	f7fe ffd2 	bl	80001d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001234:	b005      	add	sp, #20
 8001236:	f85d fb04 	ldr.w	pc, [sp], #4
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b510      	push	{r4, lr}
 8001242:	4604      	mov	r4, r0
 8001244:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	2214      	movs	r2, #20
 8001248:	2100      	movs	r1, #0
 800124a:	a803      	add	r0, sp, #12
 800124c:	f000 f8a4 	bl	8001398 <memset>
  if(huart->Instance==USART2)
 8001250:	6822      	ldr	r2, [r4, #0]
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HAL_UART_MspInit+0x60>)
 8001254:	429a      	cmp	r2, r3
 8001256:	d121      	bne.n	800129c <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001258:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800125c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8001260:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001264:	625a      	str	r2, [r3, #36]	; 0x24
 8001266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	480e      	ldr	r0, [pc, #56]	; (80012a4 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800126a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800126e:	9201      	str	r2, [sp, #4]
 8001270:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	69da      	ldr	r2, [r3, #28]
 8001274:	f042 0201 	orr.w	r2, r2, #1
 8001278:	61da      	str	r2, [r3, #28]
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001284:	230c      	movs	r3, #12
 8001286:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128c:	2301      	movs	r3, #1
 800128e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001294:	2307      	movs	r3, #7
 8001296:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f7fe fffa 	bl	8000290 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800129c:	b008      	add	sp, #32
 800129e:	bd10      	pop	{r4, pc}
 80012a0:	40004400 	.word	0x40004400
 80012a4:	40020000 	.word	0x40020000

080012a8 <NMI_Handler>:
 80012a8:	4770      	bx	lr

080012aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	e7fe      	b.n	80012ac <MemManage_Handler>

080012ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ae:	e7fe      	b.n	80012ae <BusFault_Handler>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler>

080012b2 <SVC_Handler>:
 80012b2:	4770      	bx	lr

080012b4 <DebugMon_Handler>:
 80012b4:	4770      	bx	lr

080012b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b6:	4770      	bx	lr

080012b8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b8:	f7fe bf80 	b.w	80001bc <HAL_IncTick>

080012bc <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <SystemInit+0x3c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012c4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80012c6:	6899      	ldr	r1, [r3, #8]
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <SystemInit+0x40>)
 80012ca:	400a      	ands	r2, r1
 80012cc:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80012d4:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 80012d8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012e0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80012e8:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012f2:	4b03      	ldr	r3, [pc, #12]	; (8001300 <SystemInit+0x44>)
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	4770      	bx	lr
 80012f8:	40023800 	.word	0x40023800
 80012fc:	88ffc00c 	.word	0x88ffc00c
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001304:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001306:	e003      	b.n	8001310 <LoopCopyDataInit>

08001308 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800130a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800130c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800130e:	3104      	adds	r1, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001314:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001316:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001318:	d3f6      	bcc.n	8001308 <CopyDataInit>
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800131c:	e002      	b.n	8001324 <LoopFillZerobss>

0800131e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001320:	f842 3b04 	str.w	r3, [r2], #4

08001324 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001326:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001328:	d3f9      	bcc.n	800131e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800132a:	f7ff ffc7 	bl	80012bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132e:	f000 f80f 	bl	8001350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001332:	f7ff fef3 	bl	800111c <main>
  bx lr
 8001336:	4770      	bx	lr
  ldr r3, =_sidata
 8001338:	080013ec 	.word	0x080013ec
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001340:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001344:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001348:	20000064 	.word	0x20000064

0800134c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC1_IRQHandler>
	...

08001350 <__libc_init_array>:
 8001350:	b570      	push	{r4, r5, r6, lr}
 8001352:	2500      	movs	r5, #0
 8001354:	4e0c      	ldr	r6, [pc, #48]	; (8001388 <__libc_init_array+0x38>)
 8001356:	4c0d      	ldr	r4, [pc, #52]	; (800138c <__libc_init_array+0x3c>)
 8001358:	1ba4      	subs	r4, r4, r6
 800135a:	10a4      	asrs	r4, r4, #2
 800135c:	42a5      	cmp	r5, r4
 800135e:	d109      	bne.n	8001374 <__libc_init_array+0x24>
 8001360:	f000 f822 	bl	80013a8 <_init>
 8001364:	2500      	movs	r5, #0
 8001366:	4e0a      	ldr	r6, [pc, #40]	; (8001390 <__libc_init_array+0x40>)
 8001368:	4c0a      	ldr	r4, [pc, #40]	; (8001394 <__libc_init_array+0x44>)
 800136a:	1ba4      	subs	r4, r4, r6
 800136c:	10a4      	asrs	r4, r4, #2
 800136e:	42a5      	cmp	r5, r4
 8001370:	d105      	bne.n	800137e <__libc_init_array+0x2e>
 8001372:	bd70      	pop	{r4, r5, r6, pc}
 8001374:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001378:	4798      	blx	r3
 800137a:	3501      	adds	r5, #1
 800137c:	e7ee      	b.n	800135c <__libc_init_array+0xc>
 800137e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001382:	4798      	blx	r3
 8001384:	3501      	adds	r5, #1
 8001386:	e7f2      	b.n	800136e <__libc_init_array+0x1e>
 8001388:	080013e4 	.word	0x080013e4
 800138c:	080013e4 	.word	0x080013e4
 8001390:	080013e4 	.word	0x080013e4
 8001394:	080013e8 	.word	0x080013e8

08001398 <memset>:
 8001398:	4603      	mov	r3, r0
 800139a:	4402      	add	r2, r0
 800139c:	4293      	cmp	r3, r2
 800139e:	d100      	bne.n	80013a2 <memset+0xa>
 80013a0:	4770      	bx	lr
 80013a2:	f803 1b01 	strb.w	r1, [r3], #1
 80013a6:	e7f9      	b.n	800139c <memset+0x4>

080013a8 <_init>:
 80013a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013aa:	bf00      	nop
 80013ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ae:	bc08      	pop	{r3}
 80013b0:	469e      	mov	lr, r3
 80013b2:	4770      	bx	lr

080013b4 <_fini>:
 80013b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b6:	bf00      	nop
 80013b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ba:	bc08      	pop	{r3}
 80013bc:	469e      	mov	lr, r3
 80013be:	4770      	bx	lr
